{"version":3,"sources":["layouts/home/dashboard/MyAssignments.tsx","layouts/home/dashboard/Dashboard.tsx","routes/home/HomeRoutes.tsx","components/ButtonIcon.tsx","helpers/base64toBlob.ts","store/thunks/workflow/tasks.ts","helpers/andRegexFromString.ts","layouts/errors/UnderConstruction.tsx","compositions/table/PaginatingTable.tsx","compositions/table/PaginatingTableCard.tsx","helpers/statusColorsMap.tsx","helpers/sortByCompleteAndDueDate.ts","store/hooks/workflow/useAssignments.ts","store/hooks/workflow/useMyAssignments.ts"],"names":["assignmentFormatter","cell","row","className","task","title","description","stageFormatter","stage","identifier","statusFormatter","statusTitle","Badge","pill","color","statusColorsMap","MyAssignments","useMyAssignments","assignments","value","history","useHistory","assignmentsData","map","a","status","length","sort","sortByCompleteAndDueDate","columns","dataField","text","headerClasses","classes","formatter","search","data","dueDate","dayjs","format","PaginatingTableCard","paginationOptions","sizePerPage","onSelectRow","_id","workflowId","push","Dashboard","Row","Col","xl","HomeRoutes","url","match","path","exact","component","UnderConstruction","ButtonIcon","icon","iconAlign","iconClassName","transform","children","rest","classNames","base64toBlob","dataURI","splitDataURI","split","byteString","indexOf","atob","decodeURI","mimeString","ia","Uint8Array","i","charCodeAt","Blob","type","tasks","tasksDuck","create","newTask","milestoneId","actions","name","update","updateObject","addTaskDocuments","attachments","taskId","arrDocumentsPosted","attachment","uploadDoc","base64","newDoc","success","files","document","location","thumb","undefined","cancel","documents","createAssignment","assignees","assignedHours","assignment","updateAssignment","assignmentId","assignmentUpdate","getPersonAssignments","personId","reorderAssignments","items","andRegexFromString","str","andSearchString","s","trim","join","RegExp","href","to","DefaultNoData","Card","CardBody","PaginatingTable","csvExportRef","rowClasses","bordered","exportCSV","keyField","hover","noDataIndication","tabIndexCell","defaultSortDirection","rowStyle","otherTableProps","handleNextPage","page","onPageChange","handlePrevPage","pagination","paginationFactory","paginationProps","paginationTableProps","lastIndex","bootstrap4","baseProps","csvProps","current","cursor","selectRow","mode","clickToSelect","hideSelectColumn","onSelect","noGutters","xs","Button","size","onClick","disabled","getPaginationArray","totalSize","pageNo","cardClass","handleNew","handleFilter","handleExport","filterContent","componentSize","onSearchText","selectedExport","console","log","onExport","useState","searchText","setSearchText","useEffect","searchPattern","filteredData","filter","d","c","fields","searchData","f","FalconCardHeader","light","Form","inline","SearchBox","bsSize","onChange","e","target","custom","b","complete","useAssignments","useLoadAndSelect","actionCreator","selector","state","Object","values","workflow","t","isMyAssignment","reduce","find","equality","shallowEqual","postParams","deduplicate","loginPersonId","useSelector","app","login"],"mappings":"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","file":"static/js/17.ffde694e.chunk.js","sourcesContent":["////// Packages //////////////////\r\nimport React, { FC } from 'react';\r\nimport {Badge} from 'reactstrap';\r\nimport { useHistory } from 'react-router';\r\nimport dayjs from 'dayjs';\r\n\r\n////// Local Components //////////\r\n\r\n////// Global Components /////////\r\nimport PaginatingTableCard, { CustomSearchColumn } from 'compositions/table/PaginatingTableCard'\r\n\r\n////// CommonJS Helpers //////////\r\nimport { sortByCompleteAndDueDate } from 'helpers/sortByCompleteAndDueDate';\r\n\r\n////// Custom Hooks //////////////\r\nimport useMyAssignments from 'store/hooks/workflow/useMyAssignments';\r\nimport { AssignmentWithTaskInfo, ITaskStatus } from 'store/types/models/workflow';\r\n\r\nimport { statusColorsMap } from 'helpers/statusColorsMap';\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nconst assignmentFormatter = (cell: any, row: AssignmentWithTaskInfo) => (\r\n    <>\r\n        <h6 className=\"mb-1\">{ row.task.title }</h6>\r\n        <p className=\"fs--1 ml-3 my-0\">{ row.description }</p>\r\n    </>\r\n)\r\n\r\nconst stageFormatter = (cell: any, row: AssignmentWithTaskInfo) => (\r\n    <>\r\n        <h6 className=\"mb-1\">{ row.stage.identifier }</h6>\r\n        <p className=\"fs--1 ml-3 my-0\">{ row.stage.title }</p>\r\n    </>\r\n)\r\n\r\nconst statusFormatter = (statusTitle: ITaskStatus) => <Badge className=\"fs--2\" pill color={'soft-' + statusColorsMap[statusTitle]}>{statusTitle}</Badge>\r\n\r\nconst MyAssignments: FC<Props> = () => {\r\n    const { value: assignments, ...assignmentsLoader } = useMyAssignments();\r\n    const history = useHistory()\r\n    const assignmentsData = assignments\r\n                                ?.map(a => ({...a, status: a.status[a.status.length - 1]})) \r\n                                .sort(sortByCompleteAndDueDate)\r\n                                || []\r\n\r\n    const columns: CustomSearchColumn[] = [\r\n        {\r\n            dataField: 'task.title',\r\n            text: 'Task',\r\n            headerClasses: 'border-0',\r\n            classes: 'border-0 py-2 align-middle',\r\n            formatter: assignmentFormatter,\r\n            sort: true,\r\n            search: data => data.task.title + ' ' + data.description     \r\n        },\r\n        {\r\n            dataField: 'stage.identifier',\r\n            text: 'Stage',\r\n            headerClasses: 'border-0 d-none d-lg-table-cell',\r\n            classes: 'border-0 py-2 align-middle d-none d-lg-table-cell',\r\n            formatter: stageFormatter,\r\n            sort: true,\r\n            search: data => data.stage.title + ' ' + data.stage.identifier\r\n        },\r\n        {\r\n            dataField: 'dueDate',\r\n            text: 'Due Date',\r\n            headerClasses: 'border-0',\r\n            classes: 'border-0 py-2 align-middle',\r\n            formatter: dueDate => dueDate && dayjs(dueDate).format('MM/DD/YYYY'),\r\n            sort: true\r\n        }\r\n        ,\r\n        {\r\n            dataField: 'status.title',\r\n            text: 'Status',\r\n            headerClasses: 'border-0',\r\n            classes: 'border-0 py-2 align-middle',\r\n            formatter: statusFormatter,\r\n            sort: true,\r\n            search: true\r\n        }\r\n    ]\r\n    return (\r\n        <PaginatingTableCard\r\n            title=\"Assignments\"\r\n            paginationOptions={{\r\n                sizePerPage: 5\r\n            }}\r\n            columns={columns}\r\n            data={assignmentsData}\r\n            search\r\n            onSelectRow={row => row.stage?._id \r\n                                && row.stage.workflowId \r\n                                && row.task._id \r\n                                && history.push(`/workflows/${row.stage.workflowId}/stage/${row.stage._id}/task/${row.task._id}`)\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nexport default MyAssignments","////// Packages //////////////////\r\nimport React, { FC } from 'react'\r\nimport { Col, Row } from 'reactstrap'\r\n\r\n////// Local Components //////////\r\nimport MyAssignments from './MyAssignments'\r\n\r\n////// Global Components /////////\r\n\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nconst Dashboard: FC<Props> = () => {\r\n    \r\n    \r\n    return (\r\n        <Row>\r\n            <Col xl>\r\n                <MyAssignments  />\r\n            </Col>\r\n            <Col xl>\r\n\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Dashboard","import React, { FC } from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router'\r\nimport UnderConstruction from 'layouts/errors/UnderConstruction';\r\nimport Dashboard from 'layouts/home/dashboard/Dashboard';\r\n\r\ninterface Props extends RouteComponentProps {\r\n\r\n}\r\n\r\nconst HomeRoutes: FC<Props> = ({ match: { url } }) => (\r\n  <Switch>\r\n    \r\n    <Route path={`${url}/dashboard-alt`} exact component={UnderConstruction} />\r\n    <Route path={`${url}/feed`} exact component={UnderConstruction} /> \r\n    <Route path={`${url}`} component={Dashboard} />\r\n  </Switch>\r\n);\r\n\r\nexport default HomeRoutes;\r\n","import React, {FC} from 'react';\r\nimport classNames from 'classnames';\r\nimport { Button, ButtonProps } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Transform, IconProp } from '@fortawesome/fontawesome-svg-core'\r\n\r\n\r\nexport interface Props extends ButtonProps {\r\n  iconAlign?: 'right' | 'left',\r\n  iconClassName?: string;\r\n  transform?: string | Transform ;\r\n  icon: IconProp;\r\n}\r\n\r\nconst ButtonIcon: FC<Props> = ({ icon, iconAlign='left', iconClassName, transform, children, ...rest }) => (\r\n  <Button {...rest}>\r\n    {iconAlign === 'right' && children}\r\n    <FontAwesomeIcon\r\n      icon={icon}\r\n      className={classNames(iconClassName, {\r\n        'mr-1': children && iconAlign === 'left',\r\n        'ml-1': children && iconAlign === 'right'\r\n      })}\r\n      transform={transform}\r\n    />\r\n    {iconAlign === 'left' && children}\r\n  </Button>\r\n);\r\n\r\nexport default ButtonIcon;\r\n","const base64toBlob = (dataURI: string): Blob => {\r\n    const splitDataURI = dataURI.split(',')\r\n    const byteString = splitDataURI[0].indexOf('base64') >= 0 ? atob(splitDataURI[1]) : decodeURI(splitDataURI[1])\r\n    const mimeString = splitDataURI[0].split(':')[1].split(';')[0]\r\n\r\n    const ia = new Uint8Array(byteString.length)\r\n    for (let i = 0; i < byteString.length; i++) {\r\n        ia[i] = byteString.charCodeAt(i)\r\n    }\r\n    return new Blob([ia], { type: mimeString })\r\n}\r\n\r\nexport default base64toBlob;","import base64toBlob from \"helpers/base64toBlob\";\r\nimport uploadDoc from \"helpers/uploadDoc\";\r\nimport { DropzoneFile } from \"store/store\";\r\nimport { ActionCreator } from \"store/types/interface/common\";\r\nimport { MPerson } from \"store/types/models/id\";\r\nimport { ITaskStatus, MAssignment, MMilestone, MTask } from \"store/types/models/workflow\";\r\nimport { tasks as tasksDuck } from 'store/ducks/workflow';\r\nimport { BaseDuck } from \"store/ducks/BaseDuck\";\r\n\r\ninterface TasksController extends BaseDuck<MTask> {\r\n    create: ActionCreator<['addTask']>;\r\n    update: ActionCreator<['updateTask']>;\r\n    addTaskDocuments: ActionCreator<['addTaskDocuments']>;\r\n    createAssignment: ActionCreator<['createAssignment']>\r\n    updateAssignment: ActionCreator<['updateAssignment']>\r\n    getPersonAssignments: ActionCreator<[\"getPersonAssignments\"]>;\r\n    reorderAssignments: ActionCreator<\"reorderAssignment\"[]>;\r\n}\r\n\r\nexport const tasks = tasksDuck as TasksController\r\n\r\nexport const create: ActionCreator<['addTask']> = (newTask: Pick<MTask, 'title' | 'description' | 'startDate' | 'endDate' | 'isBillable' | 'budgetHours'>, milestoneId: MMilestone['_id']) => {\r\n        const actions = [{\r\n            name: 'addTask',\r\n            data: {\r\n                ...newTask,\r\n                milestoneId\r\n            }\r\n        }] as const;\r\n        return { actions }\r\n        //  const data = await dispatch(storeFetch<['addTask']>({actions}));\r\n\r\n        // if (data?.success && data.records?.[0]) {\r\n        //     const {newTask} = data.records[0];\r\n        //     const {workflows: w} = getState();\r\n\r\n        //     for ( const workflow of Object.values(w)) {\r\n        //         for (const stage of workflow.stages) {\r\n        //             for (const milestone of stage.milestones) {\r\n        //                 for (const task of milestone.tasks) {\r\n        //                     if (task._id === newTask) { \r\n        //                         const updateObject = {\r\n        //                             stages: [{\r\n        //                                 _id: stage._id,\r\n        //                                 milestones: [{\r\n        //                                     _id: milestone._id,\r\n        //                                     tasks: [newTask]\r\n        //                                 }]\r\n        //                             }]\r\n        //                         }\r\n        //                         dispatch( workflows.upsert(updateObject, workflow._id))\r\n        //                         return data;\r\n        //                     }\r\n        //                 }\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // }\r\n}\r\ntasks.create = create\r\n\r\nexport const update: ActionCreator<['updateTask']> = (updateObject: Partial<MTask> & {taskId: MTask['_id']; progress?: number; status?: string}) => {\r\n    const actions = [{\r\n        name: 'updateTask',\r\n        data: updateObject\r\n    }] as const;\r\n    return { actions }\r\n}\r\ntasks.update = update;\r\n\r\nexport const addTaskDocuments: ActionCreator<['addTaskDocuments']> = async ( attachments: DropzoneFile[], taskId: MTask['_id']) => {\r\n\r\n    const arrDocumentsPosted = [] as {location: string, thumb?: {location: string}, title: string}[]\r\n\r\n    for ( const attachment of attachments ) {        \r\n        const newDoc = await uploadDoc(base64toBlob(attachment.base64), 'document', attachment.path)\r\n        if (newDoc?.success && newDoc.files?.document) {\r\n            arrDocumentsPosted.push(\r\n                {\r\n                    location: newDoc.files?.document.name, \r\n                    thumb: newDoc.files?.document.thumb \r\n                                ? {location: newDoc.files?.document.thumb} \r\n                                : undefined, \r\n                    title: attachment.path\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    if (!attachments || !attachments.length) return { cancel: true }\r\n  \r\n    const actions = [{ \r\n        name: 'addTaskDocuments',\r\n        data: {\r\n            documents: arrDocumentsPosted,\r\n            taskId\r\n        }\r\n    }] as const;\r\n    return {actions}\r\n}\r\ntasks.addTaskDocuments = addTaskDocuments;\r\n\r\nexport const createAssignment: ActionCreator<['createAssignment']> = ( taskId: MTask['_id'], assignees: MPerson['_id'][], description: string, assignedHours: number, dueDate: string) => {\r\n    const actions = [{\r\n        name: 'createAssignment',\r\n        data: {\r\n            taskId,\r\n            assignment: {\r\n                assignees,\r\n                description,\r\n                assignedHours,\r\n                dueDate\r\n            }\r\n        }\r\n    }] as const;\r\n    return { actions }\r\n}\r\ntasks.createAssignment = createAssignment;\r\n\r\ninterface IUpdateAssignmentOptions {\r\n    status?: ITaskStatus;\r\n    complete?: boolean;\r\n    assignees?: MPerson['_id'][];\r\n    description?: string;\r\n    assignedHours?: number;\r\n    dueDate?: string;\r\n}\r\n\r\nexport const updateAssignment: ActionCreator<['updateAssignment']> = ( assignmentId: MAssignment['_id'], assignmentUpdate: IUpdateAssignmentOptions) => {\r\n    const actions = [{\r\n        name: 'updateAssignment',\r\n        data: {\r\n            assignmentId,\r\n            ...assignmentUpdate\r\n        }\r\n    }] as const;\r\n    return { actions }\r\n}\r\ntasks.updateAssignment = updateAssignment;\r\n\r\nexport const getPersonAssignments: ActionCreator<[\"getPersonAssignments\"]> = (personId: MPerson['_id']) => {\r\n    const actions = [{\r\n        name: 'getPersonAssignments',\r\n        data: {\r\n            personId\r\n        }\r\n    }] as const;\r\n    return { actions }\r\n}\r\ntasks.getPersonAssignments = getPersonAssignments;\r\n\r\ninterface ReorderAssignmentProp {\r\n    assignmentId: MAssignment['_id'];\r\n    sortIndex: number;\r\n    category: string;\r\n}\r\n\r\nexport const reorderAssignments: ActionCreator<\"reorderAssignment\"[]> = (items: ReorderAssignmentProp[]) => {\r\n    const actions = items.map( data => ({\r\n        name: 'reorderAssignment',\r\n        data\r\n    } as const))\r\n    return { actions }\r\n}\r\ntasks.reorderAssignments = reorderAssignments","const andRegexFromString = (str: string) => {\r\n    if (!str) return /./\r\n    const andSearchString = str.split(' ').map(s => '(?=.*' + s.trim() + ')').join('')\r\n    return new RegExp(andSearchString, 'i');\r\n}\r\n\r\nexport default andRegexFromString;","////// Packages //////////////////\r\nimport React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, CardBody } from 'reactstrap';\r\n\r\n////// Local Components //////////\r\n\r\n////// Global Components /////////\r\n\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\n\r\n////// Thunks ////////////////////\r\n\r\n\r\nconst UnderConstruction = () => (\r\n  <Card className=\"text-center\">\r\n    <CardBody className=\"p-5\">\r\n      <div className=\"display-1 text-200 fs-error\">Working On It</div>\r\n      <p className=\"lead mt-4 text-800 text-sans-serif font-weight-semi-bold\">\r\n        {`The page you're looking for is under construction.`}\r\n      </p>\r\n      <hr />\r\n      <p>\r\n        {`We are hard at work building the most intuitive business management app on the web`}\r\n        <a href=\"mailto:info@happin.design\" className=\"ml-1\">\r\n          We would love to hear from you. Contact Us\r\n        </a>\r\n        .\r\n      </p>\r\n      <Link className=\"btn btn-primary btn-sm mt-3\" to=\"/\">\r\n        <FontAwesomeIcon icon=\"home\" className=\"mr-2\" />\r\n        Take me home\r\n      </Link>\r\n    </CardBody>\r\n  </Card>\r\n);\r\n\r\nexport default UnderConstruction;\r\n","////// Packages //////////////////\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getPaginationArray } from 'helpers/utils';\r\nimport React, { FC } from 'react'\r\nimport BootstrapTable, { BootstrapTableProps, PaginationOptions } from 'react-bootstrap-table-next';\r\nimport paginationFactory, { PaginationProvider } from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { CSVProps } from 'react-bootstrap-table2-toolkit';\r\nimport { Button, Card, CardBody, Col, Row } from 'reactstrap';\r\n\r\n////// Local Components //////////\r\n\r\n////// Global Components /////////\r\n\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\n\r\ninterface BootstrapPropsPartial extends Partial<BootstrapTableProps> { }\r\ninterface PaginationChildProps extends PaginationOptions {\r\n    tableId?: string;\r\n    bootstrap4?: boolean;\r\n}\r\ninterface FixedFactoryProps {\r\n    paginationProps: PaginationChildProps;\r\n    paginationTableProps: BootstrapPropsPartial;\r\n}\r\n\r\n\r\nexport interface PaginatingTableProps extends Omit<BootstrapTableProps, 'keyField'> {\r\n    paginationOptions: PaginationOptions,\r\n    csvExportRef?: React.MutableRefObject<{ onExport(): void } | undefined>,\r\n    exportCSV?: boolean | CSVProps;\r\n    keyField?: string;\r\n    onSelectRow?: (row: any)=>void;\r\n}\r\n\r\nconst DefaultNoData = () => (\r\n    <Card>\r\n        <CardBody>\r\n            No Data Available\r\n        </CardBody>\r\n    </Card>\r\n)\r\n\r\n\r\nconst PaginatingTable: FC<PaginatingTableProps> = ({\r\n    paginationOptions,\r\n    csvExportRef,\r\n    data,\r\n    columns,\r\n    classes = \"table-dashboard table-striped table-sm fs--1 border-bottom border-200 mb-0 table-dashboard-th-nowrap\",\r\n    rowClasses = \"btn-reveal-trigger border-top border-200\",\r\n    headerClasses = \"bg-200 text-900 border-y border-200\",\r\n    bordered = false,\r\n    exportCSV,\r\n    keyField = \"_id\",\r\n    hover=true,\r\n    noDataIndication=DefaultNoData,\r\n    tabIndexCell=true,\r\n    defaultSortDirection=\"asc\",\r\n    rowStyle,\r\n    onSelectRow,\r\n    ...otherTableProps\r\n}) => {\r\n\r\n    const handleNextPage = ({ page, onPageChange }: PaginationChildProps) => () => {\r\n        onPageChange && onPageChange(page! + 1, paginationOptions.sizePerPage!);\r\n    };\r\n\r\n    const handlePrevPage = ({ page, onPageChange }: PaginationChildProps) => () => {\r\n        onPageChange && onPageChange(page! - 1, paginationOptions.sizePerPage!);\r\n    };\r\n\r\n    return (\r\n\r\n        <PaginationProvider pagination={paginationFactory(paginationOptions)}>\r\n            {({ paginationProps, paginationTableProps }: FixedFactoryProps) => {\r\n                const lastIndex = paginationProps.page! * paginationProps.sizePerPage!;\r\n                return (\r\n                    <>\r\n                        <div className=\"table-responsive\">\r\n                            <ToolkitProvider\r\n                                keyField=\"_id\"\r\n                                data={data}\r\n                                columns={columns}\r\n                                bootstrap4\r\n                                exportCSV={exportCSV}\r\n                            >\r\n                                {\r\n                                    ({ baseProps, csvProps }) => {\r\n                                        if (csvExportRef) csvExportRef.current = csvProps\r\n                                        return (\r\n                                            <BootstrapTable\r\n                                                bordered={bordered}\r\n                                                classes={classes}\r\n                                                rowClasses={rowClasses}\r\n                                                headerClasses={headerClasses}\r\n                                                hover={hover}\r\n                                                noDataIndication={noDataIndication}\r\n                                                tabIndexCell={tabIndexCell}\r\n                                                defaultSortDirection={defaultSortDirection}\r\n                                                rowStyle={{cursor: 'pointer', ...rowStyle}}\r\n                                                selectRow={onSelectRow && {\r\n                                                    mode: 'radio',\r\n                                                    clickToSelect: true,\r\n                                                    hideSelectColumn: true,\r\n                                                    classes: 'bg-soft-primary',\r\n                                                    onSelect: onSelectRow\r\n                                                }}\r\n                                                {...otherTableProps}\r\n                                                {...baseProps}\r\n                                                {...paginationTableProps}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                }\r\n                            </ToolkitProvider>\r\n                        </div>\r\n                        <Row noGutters className=\"px-1 py-3 flex-center\">\r\n                            <Col xs=\"auto\">\r\n                                <Button\r\n                                    color=\"falcon-default\"\r\n                                    size=\"sm\"\r\n                                    onClick={handlePrevPage(paginationProps)}\r\n                                    disabled={paginationProps.page === 1}\r\n                                >\r\n                                    <FontAwesomeIcon icon=\"chevron-left\" />\r\n                                </Button>\r\n                                {getPaginationArray(paginationProps.totalSize!, paginationProps.sizePerPage!).map(pageNo => (\r\n                                    <Button\r\n                                        color={paginationProps.page === pageNo ? 'falcon-primary' : 'falcon-default'}\r\n                                        size=\"sm\"\r\n                                        className=\"ml-2\"\r\n                                        onClick={() => paginationProps.onPageChange!(pageNo, paginationProps.sizePerPage!)}\r\n                                        key={pageNo}\r\n                                    >\r\n                                        {pageNo}\r\n                                    </Button>\r\n                                ))}\r\n                                <Button\r\n                                    color=\"falcon-default\"\r\n                                    size=\"sm\"\r\n                                    className=\"ml-2\"\r\n                                    onClick={handleNextPage(paginationProps)}\r\n                                    disabled={lastIndex >= paginationProps.totalSize!}\r\n                                >\r\n                                    <FontAwesomeIcon icon=\"chevron-right\" />\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </>\r\n                );\r\n            }}\r\n        </PaginationProvider>\r\n    )\r\n}\r\n\r\nexport default PaginatingTable\r\n","////// Packages //////////////////\r\nimport React, { FC, useEffect, useState } from 'react'\r\nimport { Card, CardBody, Form } from 'reactstrap'\r\n\r\n////// Local Components //////////\r\nimport PaginatingTable, {PaginatingTableProps} from './PaginatingTable'\r\n\r\n////// Global Components /////////\r\nimport FalconCardHeader from 'components/FalconCardHeader'\r\nimport ButtonIcon from 'components/ButtonIcon'\r\nimport SearchBox from 'compositions/SearchBox'\r\nimport andRegexFromString from 'helpers/andRegexFromString'\r\nimport { ColumnDescription } from 'react-bootstrap-table-next'\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\n\r\n\r\n// eslint-disable-next-line\r\nexport interface CustomSearchColumn<T extends object=any, U=any> extends ColumnDescription<T, U> {\r\n    search?: boolean | ( (data: any) => string )\r\n}\r\n\r\ninterface Props extends PaginatingTableProps {\r\n    title: string;\r\n    cardClass?: string;\r\n    handleNew?: () => void;\r\n    handleFilter?: () => void;\r\n    handleExport?: (() => void) | false;\r\n    filterContent?: React.ReactNode;\r\n    componentSize?: \"sm\" | \"md\" | \"lg\";\r\n    columns: CustomSearchColumn[];\r\n    onSearchText?: (text: string)=>void\r\n}\r\n\r\nconst PaginatingTableCard: FC<Props> = ({ \r\n    title, \r\n    cardClass, \r\n    handleNew, \r\n    handleFilter, \r\n    handleExport, \r\n    filterContent, \r\n    csvExportRef, \r\n    search, \r\n    componentSize=\"sm\",\r\n    data, \r\n    columns, \r\n    paginationOptions,\r\n    onSearchText,\r\n    ...rest\r\n}) => {\r\n    const defaultExport = csvExportRef && ( () => {console.log(csvExportRef.current) ; csvExportRef.current?.onExport() } )\r\n    \r\n    const selectedExport = handleExport === false ? undefined : (handleExport || defaultExport)\r\n\r\n    const [searchText, setSearchText] = useState('');\r\n\r\n    useEffect(()=>onSearchText && onSearchText(searchText), [searchText])\r\n\r\n    const searchPattern = andRegexFromString(searchText);\r\n\r\n    const filteredData = searchText \r\n                            ? data.filter( d => columns\r\n                                                .map( c => {\r\n                                                    if (c.search) {\r\n                                                        if (c.search === true) {\r\n                                                            const fields = c.dataField.split('.')\r\n                                                            let searchData = d\r\n                                                            for (const f of fields) {\r\n                                                                searchData = typeof searchData === 'object' ? searchData[f] : undefined\r\n                                                            }\r\n                                                            if (searchData) return searchData\r\n                                                        } else {\r\n                                                            return c.search(d)\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                .filter(s=>s)\r\n                                                .join(' ')\r\n                                                .match(searchPattern)\r\n                                )\r\n                            : data\r\n\r\n\r\n    return (\r\n        <Card className={cardClass}>\r\n            <FalconCardHeader title={title} light={false}>\r\n                <Form inline>\r\n                    { search && <SearchBox bsSize={componentSize === \"md\" ? undefined: componentSize} value={searchText} onChange={e=>setSearchText(e.target.value)}/> }\r\n                    {handleNew && \r\n                        <ButtonIcon\r\n                            icon=\"plus\"\r\n                            transform=\"shrink-3 down-2\"\r\n                            color=\"falcon-default\"\r\n                            size={componentSize}\r\n                            className=\"ml-2\"\r\n                            onClick={handleNew}\r\n                        >\r\n                            New\r\n                        </ButtonIcon>\r\n                    }\r\n                    {handleFilter && \r\n                        <ButtonIcon\r\n                            icon=\"filter\"\r\n                            transform=\"shrink-3 down-2\"\r\n                            color=\"falcon-default\"\r\n                            size={componentSize}\r\n                            className=\"ml-2\"\r\n                            onClick={handleFilter}\r\n                        >\r\n                            Filter\r\n                        </ButtonIcon>\r\n                    }\r\n                    {selectedExport && \r\n                        <ButtonIcon\r\n                            icon=\"external-link-alt\"\r\n                            transform=\"shrink-3 down-2\"\r\n                            color=\"falcon-default\"\r\n                            size={componentSize}\r\n                            className=\"ml-2\"\r\n                            onClick={selectedExport}\r\n                        >\r\n                            Export\r\n                        </ButtonIcon>\r\n                    }\r\n                </Form>\r\n                \r\n            </FalconCardHeader>\r\n            <CardBody className=\"p-0\">\r\n                { filterContent }\r\n                <PaginatingTable\r\n                    csvExportRef={csvExportRef}\r\n                    columns={columns}\r\n                    data={filteredData}\r\n                    paginationOptions={{\r\n                        ...paginationOptions,\r\n                        custom: true,\r\n                        totalSize: filteredData.length || 1\r\n                    }}\r\n                    {...rest}\r\n                />\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default PaginatingTableCard","import { FalconColors } from \"components/falconTypes\";\r\nimport { ITaskStatus } from \"store/types/models/workflow\";\r\n\r\nexport const statusColorsMap: Record<ITaskStatus, FalconColors> = {\r\n    \"Not Started\": \"secondary\",\r\n    \"In Progress\": \"primary\",\r\n    \"Complete\": \"success\",\r\n    \"Running Late\": \"warning\",\r\n    \"Having Trouble\": \"warning\",\r\n    \"Waiting\": \"info\",\r\n    \"Past Due\": \"danger\"\r\n  };","export const sortByCompleteAndDueDate = <T extends {dueDate: string, complete: boolean}>(a: T, b: T) => {\r\n    if (a.complete) {\r\n        if (b.complete) {\r\n            if ( a.dueDate > b.dueDate ) {\r\n                return -1\r\n            } else {\r\n                return 1\r\n            }\r\n        } else {\r\n            return 1\r\n        }\r\n    } else {\r\n        if ( b.complete ) {\r\n            return -1\r\n        } else {\r\n            if ( a.dueDate > b.dueDate ) {\r\n                return 1\r\n            } else {\r\n                return -1\r\n            }\r\n        }\r\n    }\r\n}","import { shallowEqual } from \"react-redux\";\r\nimport { getPersonAssignments } from \"store/thunks/workflow/tasks\";\r\nimport { MPerson } from \"store/types/models/id\";\r\nimport { AssignmentWithTaskInfo, TaskWithAssignmentInfo } from \"store/types/models/workflow\";\r\nimport useLoadAndSelect from \"../useLoadAndSelect\";\r\n\r\nfunction useAssignments(personId: MPerson['_id']) {\r\n    return useLoadAndSelect({\r\n        actionCreator: getPersonAssignments,\r\n        selector: state => (Object.values(state.workflow.tasks) as TaskWithAssignmentInfo[])\r\n                            .filter( t => t.isMyAssignment )\r\n                            .reduce( (assignments, task) => [\r\n                                ...assignments, \r\n                                ...task.assignments\r\n                                    .filter(a => a.assignees.find(a => a.personId === personId))\r\n                                    .map(a => ({\r\n                                        ...a,\r\n                                        task: {\r\n                                            _id: task._id,\r\n                                            title: task.title\r\n                                        },\r\n                                        stage: task.stage\r\n                                    }))\r\n                                ], [] as AssignmentWithTaskInfo[]\r\n                            ),\r\n        equality: shallowEqual,\r\n        postParams: personId,\r\n        deduplicate: ['assignments', personId]\r\n    })\r\n}\r\n\r\nexport default useAssignments;","import { useSelector } from 'react-redux'\r\nimport useAssignments from './useAssignments'\r\n\r\nfunction useMyAssignments() {\r\n    const loginPersonId = useSelector(state => state.app.login.personId);\r\n    return useAssignments(loginPersonId || '') \r\n}\r\n\r\nexport default useMyAssignments"],"sourceRoot":""}