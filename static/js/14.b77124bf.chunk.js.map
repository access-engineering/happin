{"version":3,"sources":["store/hooks/finance/useLedgers.ts","layouts/finance/accounts/ExportBalanceSheetButton.tsx","layouts/finance/accounts/ExportIncomeStatementButton.tsx","layouts/finance/accounts/Accounts.tsx","layouts/finance/expenses/ExpenseReportCard.tsx","layouts/finance/expenses/NewExpenseReport.tsx","layouts/finance/expenses/Expenses.tsx","routes/finance/FinanceRoutes.tsx","components/FormGroupInput.tsx","components/LoadingGateway.tsx","components/ButtonIcon.tsx","components/FormGroupSelect.tsx","components/Loader.tsx","helpers/andRegexFromString.ts","layouts/errors/UnderConstruction.tsx","compositions/PersonMediaSmall.tsx","store/hooks/person/useOrgEmployees.ts","compositions/table/PaginatingTable.tsx","compositions/table/PaginatingTableCard.tsx","store/hooks/user/useMyPermissions.ts","store/thunks/finance.ts","compositions/NameFormatter.tsx","store/hooks/user/useEvaluatePermissions.ts","helpers/getDocumentIcon.tsx","components/FileThumbnailGroup.tsx"],"names":["useLedgers","useLoadAndSelect","actionCreator","getLedgers","selector","state","Object","values","finance","ledgers","equality","shallowEqual","deduplicate","LedgerPrintCategory","classification","subClassifications","className","Flex","align","justify","currencyFormat","format","filter","l","reduce","total","ledger","currentBalance","map","subClassification","i","width","indx","style","borderBottom","name","ExportBalanceSheetButton","value","useState","isOpen","setIsOpen","setTooltipOpen","handlePrint","useReactToPrint","content","printWrapperRef","current","removeAfterPrint","documentTitle","pageStyle","useRef","UncontrolledTooltip","target","placement","trigger","Button","id","size","color","onClick","event","preventDefault","icon","Modal","toggle","o","ModalHeader","Row","Col","xs","ModalBody","ref","ExportIncomeStatementButton","LedgerCategory","setClassification","setSubClassification","setIsOpenModal","children","Card","CardBody","tag","Collapse","LedgerList","index","Accounts","isOpenCreateModal","setIsOpenCreateModal","newLedgerName","setNewLedgerName","newLedger","useAction","createLedger","a","post","data","success","toast","error","FalconCardHeader","title","noGutters","lg","UncontrolledCollapse","toggler","FormGroupInput","label","onChange","e","ModalFooter","expenses","_id","description","enteredBy","enteredDate","ledgerId","ledgerName","contextId","stageId","stageIdentifier","taskId","taskTitle","lines","paymentMethod","expenseDate","vendorName","receipts","location","tags","uploadDate","uploadedBy","unitCost","quantity","cost","approval","approved","approvedBy","approvedDate","ExpenseReportCard","expenseId","useParams","expense","find","people","useSelector","printRef","onBeforeGetContent","rootEl","document","getElementById","console","log","line","receipt","path","$fileserv","mimeType","mime","lookup","match","titleEl","createElement","textContent","appendChild","el","src","alt","onAfterPrint","lastElementChild","removeChild","expenseLoader","loading","LoadingGateway","dataLoader","undefined","innerRef","makeName","dayjs","split","s","methods","m","method","declined","declinedBy","declinedDate","FileThumbnailGroup","files","idPrefix","reimbursedDate","NewExpenseReport","loginPerson","app","login","personId","useOrgEmployees","employeeList","employeeListLoader","canEnterAny","useEvaluatePermissions","PERMISSIONS","ENTER_ANY_EXPENSE","enteredByOptions","setEnteredBy","setDescription","setTitle","FormGroupSelect","placeholder","classNamePrefix","options","isLoading","formatOptionLabel","option","PersonMediaSmall","person","type","rows","CardFooter","alert","CardColumns","Expenses","url","useRouteMatch","history","useHistory","distinctIds","Array","from","Set","usePeopleList","populatedExpenses","enteredByPerson","p","columns","dataField","text","search","sort","headerClasses","classes","formatter","cell","row","csvFormatter","first","last","reverse","NameFormatter","avatar","flat","csvExportRef","PaginatingTableCard","paginationOptions","sizePerPage","onSelectRow","push","exportCSV","fileName","handleNew","component","FinanceRoutes","UnderConstruction","to","formClass","feedback","valid","invalid","isTooltipFeedback","labelProps","rest","inputProps","htmlFor","tooltip","xl","join","ButtonIcon","iconAlign","iconClassName","transform","classNames","styles","for","menu","provided","zIndex","Loader","props","andRegexFromString","str","andSearchString","trim","RegExp","href","personName","position","organizationId","myOrgId","selectedOrg","getOrgEmployees","postParams","DefaultNoData","PaginatingTable","rowClasses","bordered","keyField","hover","noDataIndication","tabIndexCell","defaultSortDirection","rowStyle","otherTableProps","handleNextPage","page","onPageChange","handlePrevPage","pagination","paginationFactory","paginationProps","paginationTableProps","lastIndex","bootstrap4","baseProps","csvProps","cursor","selectRow","mode","clickToSelect","hideSelectColumn","onSelect","disabled","getPaginationArray","totalSize","pageNo","cardClass","handleFilter","handleExport","filterContent","componentSize","onSearchText","selectedExport","onExport","searchText","setSearchText","useEffect","searchPattern","filteredData","d","c","fields","searchData","f","light","Form","inline","SearchBox","bsSize","custom","length","useMyPermissions","user","useMyUser","explicitPermissions","permissionsGroup","groupId","groupPermissions","usergroups","permissions","union","wages","wagesDuck","expensesDuck","ledgerDuck","createWage","wage","actions","getPersonWages","deleteWage","wageId","getExpense","getLedger","displayName","common","body","testPermissions","intersection","GLOBAL_ADMIN","iconMap","extensions","image","file","getDocumentIcon","docName","test","handleAdd","arr","window","open","React","memo"],"mappings":"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","file":"static/js/14.b77124bf.chunk.js","sourcesContent":["import { shallowEqual } from \"react-redux\";\r\nimport { getLedgers } from \"store/thunks/finance\";\r\nimport useLoadAndSelect from \"../useLoadAndSelect\";\r\n\r\nexport function useLedgers() {\r\n    return useLoadAndSelect({\r\n        actionCreator: getLedgers,\r\n        selector: state => Object.values(state.finance.ledgers),\r\n        equality: shallowEqual,\r\n        deduplicate: ['ledgers']\r\n    })\r\n}\r\n\r\nexport default useLedgers;","////// Packages //////////////////\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport Flex from 'components/Flex'\r\nimport { currencyFormat } from 'environ'\r\nimport React, { FC, useRef, useState } from 'react'\r\nimport { useReactToPrint } from 'react-to-print'\r\nimport { Button, Col, Modal, ModalBody, ModalHeader, Row, UncontrolledTooltip } from 'reactstrap'\r\nimport useLedgers from 'store/hooks/finance/useLedgers'\r\nimport { MLedger } from 'store/types/models/finance'\r\n\r\n////// Local Components //////////\r\n\r\n////// Global Components /////////\r\n\r\n\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\n\r\n\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nconst ExportBalanceSheetButton: FC<Props> = () => {\r\n    const { value: ledgers, ...ledgersLoader } = useLedgers()\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [tooltipOpen, setTooltipOpen] = useState(false);\r\n\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: ()=>printWrapperRef.current,\r\n        removeAfterPrint: true,\r\n        documentTitle: 'Balance Sheet',\r\n        pageStyle: `\r\n        @media print {\r\n            body {\r\n                color: rgb(45, 45, 45)!important;\r\n            }\r\n            .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6 {\r\n                color: black!important;\r\n            } \r\n            p {\r\n                color: rgb(45, 45, 45)!important;\r\n            }\r\n            .print-section {\r\n                page-break-before: always!important;\r\n            }\r\n        }\r\n        `\r\n    })\r\nconst printWrapperRef = useRef<HTMLDivElement>(null)\r\n\r\nfunction handleButtonClick (event: React.MouseEvent<HTMLButtonElement>) {\r\n    event.preventDefault()\r\n    setTooltipOpen(false)\r\n    setIsOpen(true)\r\n}\r\n\r\nreturn (\r\n    <>\r\n            <UncontrolledTooltip target={`tooltip-export-balance-sheet`} placement=\"top\" trigger=\"hover\">\r\n                Export summary\r\n            </UncontrolledTooltip>\r\n            <Button id={`tooltip-export-balance-sheet`} size=\"md\" className=\"mr-2\" color=\"primary\" onClick={handleButtonClick}>\r\n                <FontAwesomeIcon icon=\"download\" />\r\n            </Button>\r\n            <Modal isOpen={isOpen} toggle={()=>{setIsOpen(o => !o)}} size=\"xl\">\r\n                <ModalHeader className=\"bg-light d-block border-bottom-0\">\r\n                    <Row className=\"align-items-center\">\r\n                        <Col>\r\n                             Print Balance Sheet\r\n                        </Col>\r\n                        <Col xs=\"auto\" >\r\n                            <Button id={`tooltip-print-balance-sheet`} color=\"warning\" size=\"sm\" onClick={handlePrint}>\r\n                                <FontAwesomeIcon icon=\"print\" />\r\n                            </Button>\r\n                            <UncontrolledTooltip target={`tooltip-print-balance-sheet`} placement=\"top\" trigger=\"hover\">\r\n                                Print\r\n                            </UncontrolledTooltip>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalHeader> \r\n                <ModalBody>\r\n                    <div ref={printWrapperRef!}>\r\n                        <LedgerPrintCategory\r\n                            classification=\"Assets\"\r\n                            subClassifications={['Current', 'Receivable', 'Long Term']}\r\n                            ledgers={ledgers}\r\n                        />\r\n                        <LedgerPrintCategory\r\n                            classification=\"Liabilities\"\r\n                            subClassifications={['Current', 'Receivable', 'Long Term']}\r\n                            ledgers={ledgers}\r\n                        />\r\n                        <LedgerPrintCategory\r\n                            classification=\"Equity\"\r\n                            subClassifications={['']}\r\n                            ledgers={ledgers}\r\n                        />                        \r\n                    </div>\r\n                </ModalBody>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface P {\r\n    classification: string;\r\n    subClassifications: (string|undefined)[];\r\n    ledgers?: MLedger[] | null\r\n}\r\nconst LedgerPrintCategory: FC<P> = ({classification, subClassifications, ledgers}) => (\r\n    <div className=\"print-section\">\r\n        <Flex className=\"bg-light py-3 px-2 mb-4\" align=\"center\" justify=\"between\">\r\n            <h3 className=\"my-0\">{classification}</h3>\r\n            <h3 className=\"my-0\">\r\n                {\r\n                    currencyFormat.format(\r\n                        ledgers\r\n                            ?.filter( l => l.classification === 'Assets')\r\n                            .reduce((total, ledger) => total + (ledger.currentBalance || 0), 0)\r\n                        || 0\r\n                    )\r\n                }\r\n            </h3>\r\n        </Flex>\r\n        {subClassifications.map( (subClassification, i) => (\r\n            <div className=\"mx-3 mb-3\" key={i}>  \r\n                {subClassification && \r\n                    <>\r\n                        <h5>{subClassification}</h5>\r\n                        <hr />\r\n                    </>\r\n                }\r\n                <table width=\"100%\" className=\"mb-3\">\r\n                    <tr>\r\n                        <th>Account Name</th>\r\n                        <th className=\"text-right\">Balance</th>\r\n                    </tr>\r\n                    {ledgers\r\n                        ?.filter( l => l.classification === classification && l.subClassification === subClassification)\r\n                        .map( (l, indx) => (\r\n                            <tr key={indx}>\r\n                                <td style={{borderBottom: \"1px dotted black\"}}>{l.name}</td>\r\n                                <td className=\"text-right\" style={{borderBottom: \"1px dotted black\"}}>{currencyFormat.format(l.currentBalance || 0)}</td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                </table>\r\n            </div>\r\n        ))}\r\n    </div>\r\n) \r\n        \r\nexport default ExportBalanceSheetButton;","////// Packages //////////////////\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport Flex from 'components/Flex'\r\nimport { currencyFormat } from 'environ'\r\nimport React, { FC, useRef, useState } from 'react'\r\nimport { useReactToPrint } from 'react-to-print'\r\nimport { Button, Col, Modal, ModalBody, ModalHeader, Row, UncontrolledTooltip } from 'reactstrap'\r\nimport useLedgers from 'store/hooks/finance/useLedgers'\r\nimport { MLedger } from 'store/types/models/finance'\r\n\r\n////// Local Components //////////\r\n\r\n////// Global Components /////////\r\n\r\n\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\n\r\n\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nconst ExportIncomeStatementButton: FC<Props> = () => {\r\n    const { value: ledgers, ...ledgersLoader } = useLedgers()\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [tooltipOpen, setTooltipOpen] = useState(false);\r\n\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: ()=>printWrapperRef.current,\r\n        removeAfterPrint: true,\r\n        documentTitle: 'Income Statement',\r\n        pageStyle: `\r\n        @media print {\r\n            body {\r\n                color: rgb(45, 45, 45)!important;\r\n            }\r\n            .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6 {\r\n                color: black!important;\r\n            } \r\n            p {\r\n                color: rgb(45, 45, 45)!important;\r\n            }\r\n            .print-section {\r\n                page-break-before: always!important;\r\n            }\r\n        }\r\n        `\r\n    })\r\nconst printWrapperRef = useRef<HTMLDivElement>(null)\r\n\r\nfunction handleButtonClick (event: React.MouseEvent<HTMLButtonElement>) {\r\n    event.preventDefault()\r\n    setTooltipOpen(false)\r\n    setIsOpen(true)\r\n}\r\n\r\nreturn (\r\n    <>\r\n            <UncontrolledTooltip target={`tooltip-export-balance-sheet`} placement=\"top\" trigger=\"hover\">\r\n                Export summary\r\n            </UncontrolledTooltip>\r\n            <Button id={`tooltip-export-balance-sheet`} size=\"md\" className=\"mr-2\" color=\"primary\" onClick={handleButtonClick}>\r\n                <FontAwesomeIcon icon=\"download\" />\r\n            </Button>\r\n            <Modal isOpen={isOpen} toggle={()=>{setIsOpen(o => !o)}} size=\"xl\">\r\n                <ModalHeader className=\"bg-light d-block border-bottom-0\">\r\n                    <Row className=\"align-items-center\">\r\n                        <Col>\r\n                             Print Income Statement\r\n                        </Col>\r\n                        <Col xs=\"auto\" >\r\n                            <Button id={`tooltip-print-balance-sheet`} color=\"warning\" size=\"sm\" onClick={handlePrint}>\r\n                                <FontAwesomeIcon icon=\"print\" />\r\n                            </Button>\r\n                            <UncontrolledTooltip target={`tooltip-print-balance-sheet`} placement=\"top\" trigger=\"hover\">\r\n                                Print\r\n                            </UncontrolledTooltip>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalHeader> \r\n                <ModalBody>\r\n                    <div ref={printWrapperRef!}>\r\n                        <LedgerPrintCategory\r\n                            classification=\"Revenues\"\r\n                            subClassifications={['']}\r\n                            ledgers={ledgers}\r\n                        />\r\n                        <LedgerPrintCategory\r\n                            classification=\"Expenses\"\r\n                            subClassifications={['Cost of Goods Sold', 'Operating Expenses']}\r\n                            ledgers={ledgers}\r\n                        />\r\n                        <LedgerPrintCategory\r\n                            classification=\"Operating Profit\"\r\n                            subClassifications={['']}\r\n                            ledgers={ledgers}\r\n                        />                        \r\n                    </div>\r\n                </ModalBody>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface P {\r\n    classification: string;\r\n    subClassifications: (string|undefined)[];\r\n    ledgers?: MLedger[] | null\r\n}\r\nconst LedgerPrintCategory: FC<P> = ({classification, subClassifications, ledgers}) => (\r\n    <div className=\"print-section\">\r\n        <Flex className=\"bg-light py-3 px-2 mb-4\" align=\"center\" justify=\"between\">\r\n            <h3 className=\"my-0\">{classification}</h3>\r\n            <h3 className=\"my-0\">\r\n                {\r\n                    currencyFormat.format(\r\n                        ledgers\r\n                            ?.filter( l => l.classification === 'Assets')\r\n                            .reduce((total, ledger) => total + (ledger.currentBalance || 0), 0)\r\n                        || 0\r\n                    )\r\n                }\r\n            </h3>\r\n        </Flex>\r\n        {subClassifications.map( (subClassification, i) => (\r\n            <div className=\"mx-3 mb-3\" key={i}>  \r\n                {subClassification && \r\n                    <>\r\n                        <h5>{subClassification}</h5>\r\n                        <hr />\r\n                    </>\r\n                }\r\n                <table width=\"100%\" className=\"mb-3\">\r\n                    <tr>\r\n                        <th>Account Name</th>\r\n                        <th className=\"text-right\">Balance</th>\r\n                    </tr>\r\n                    {ledgers\r\n                        ?.filter( l => l.classification === classification && l.subClassification === subClassification)\r\n                        .map( (l, indx) => (\r\n                            <tr key={indx}>\r\n                                <td style={{borderBottom: \"1px dotted black\"}}>{l.name}</td>\r\n                                <td className=\"text-right\" style={{borderBottom: \"1px dotted black\"}}>{currencyFormat.format(l.currentBalance || 0)}</td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                </table>\r\n            </div>\r\n        ))}\r\n    </div>\r\n) \r\n        \r\nexport default ExportIncomeStatementButton;","////// Packages //////////////////\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React, { FC, useState } from 'react'\r\nimport { Button, Card, CardBody, Col, Collapse, Modal, ModalBody, ModalFooter, ModalHeader, Row, UncontrolledCollapse } from 'reactstrap'\r\nimport { toast } from 'react-toastify'\r\n\r\n////// Local Components //////////\r\nimport ExportBalanceSheetButton from './ExportBalanceSheetButton'\r\nimport ExportIncomeStatementButton from './ExportIncomeStatementButton'\r\n\r\n////// Global Components /////////\r\nimport Flex from 'components/Flex'\r\nimport FormGroupInput from 'components/FormGroupInput'\r\nimport FalconCardHeader from 'components/FalconCardHeader'\r\n\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\nimport useLedgers from 'store/hooks/finance/useLedgers'\r\nimport useAction from 'store/hooks/useAction'\r\n\r\n////// Thunks ////////////////////\r\nimport { createLedger } from 'store/thunks/finance'\r\n\r\n////// Types /////////////////////\r\nimport { MLedger } from 'store/types/models/finance'\r\n\r\ninterface CategoryProps {\r\n    classification: string;\r\n    subClassification: string;\r\n    setIsOpenModal: React.Dispatch<React.SetStateAction<boolean>>;\r\n    setClassification: React.Dispatch<React.SetStateAction<string>>;\r\n    setSubClassification: React.Dispatch<React.SetStateAction<string>>;\r\n    ledgers?: MLedger[] | null\r\n}\r\n\r\nconst LedgerCategory: FC<CategoryProps> = ({ classification, setClassification, subClassification, setSubClassification, setIsOpenModal, ledgers, children }) => {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    return (\r\n        <div className=\"my-2\">\r\n            <Card onClick={() => setIsOpen(o => !o)} className=\"cursor-pointer bg-light border\">\r\n                <CardBody tag={Flex} justify=\"between\" align=\"center\">\r\n                    <h5>{subClassification}</h5>\r\n                    <Button\r\n                        size=\"sm\"\r\n                        color='falcon-primary'\r\n                        onClick={() => {\r\n                            setClassification(classification);\r\n                            setSubClassification(subClassification);\r\n                            setIsOpenModal(true)\r\n                        }}\r\n                    >\r\n                        <FontAwesomeIcon icon=\"plus\" />\r\n                    </Button>\r\n                </CardBody>\r\n            </Card>\r\n            <Collapse isOpen={isOpen}>\r\n                <LedgerList \r\n                    filter={ ledger => ledger.classification === classification && ledger.subClassification === subClassification }\r\n                    ledgers={ledgers}\r\n                />\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface P {\r\n    ledgers?: MLedger[] | null;\r\n    filter: (ledger: MLedger) => boolean;\r\n}\r\n\r\nconst LedgerList: FC<P> = ({ledgers, filter}) => (\r\n    <div className=\"mx-2\">\r\n        {ledgers\r\n            ?.filter(filter)\r\n            .map((ledger, index) => (\r\n                <Card className=\"my-1 bg-light\" key={index}>\r\n                    <CardBody tag={Flex} justify=\"between\">\r\n                        <h6 className=\"my-0\">{ledger.name}</h6>\r\n                    </CardBody>\r\n                </Card>\r\n            ))\r\n        }\r\n    </div>\r\n)\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nconst Accounts: FC<Props> = () => {\r\n    const [isOpenCreateModal, setIsOpenCreateModal] = useState(false);\r\n    const [classification, setClassification] = useState('');\r\n    const [subClassification, setSubClassification] = useState('');\r\n    const [newLedgerName, setNewLedgerName] = useState('');\r\n\r\n    const { value: ledgers, ...ledgerLoader } = useLedgers();\r\n\r\n    const newLedger = useAction(createLedger);\r\n\r\n    async function handleCreateLedger() {\r\n        const data = await newLedger.post(classification, subClassification, newLedgerName);\r\n        if (data?.success) {\r\n            toast.success('Created new ledger');\r\n            setClassification('')\r\n            setSubClassification('')\r\n            setNewLedgerName('')\r\n            setIsOpenCreateModal(false)\r\n        } else {\r\n            toast.error(data?.error || 'Something went wrong')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <FalconCardHeader title=\"Balance Sheet\">\r\n                    <ExportBalanceSheetButton />\r\n                </FalconCardHeader>\r\n                <CardBody>\r\n                    <Row noGutters>\r\n                        <Col lg={4}>\r\n                            <Card className=\"bg-soft-success border\">\r\n                                <CardBody tag={Flex} justify=\"between\" align=\"center\">\r\n                                    <h4 className=\"my-0 py-0 \">Assets</h4>\r\n                                </CardBody>\r\n                            </Card>\r\n                            <Row noGutters>\r\n                                <Col lg className=\"mx-2\">\r\n                                    <LedgerCategory\r\n                                        classification=\"Assets\"\r\n                                        subClassification=\"Current\"\r\n                                        ledgers={ledgers}\r\n                                        setClassification={setClassification}\r\n                                        setSubClassification={setSubClassification}\r\n                                        setIsOpenModal={setIsOpenCreateModal}\r\n                                    />\r\n                                    <LedgerCategory\r\n                                        classification=\"Assets\"\r\n                                        subClassification=\"Receivable\"\r\n                                        ledgers={ledgers}\r\n                                        setClassification={setClassification}\r\n                                        setSubClassification={setSubClassification}\r\n                                        setIsOpenModal={setIsOpenCreateModal}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg className=\"mx-2\">\r\n                                    <LedgerCategory\r\n                                        classification=\"Assets\"\r\n                                        subClassification=\"Long Term\"\r\n                                        ledgers={ledgers}\r\n                                        setClassification={setClassification}\r\n                                        setSubClassification={setSubClassification}\r\n                                        setIsOpenModal={setIsOpenCreateModal}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col lg={1} tag={Flex} align='top' justify=\"center\" className=\"d-none d-lg-flex\">\r\n                            <h3 className=\"my-3 py-0\">=</h3>\r\n                        </Col>\r\n                        <Col lg={4}>\r\n                            <Card className=\"bg-soft-danger border\">\r\n                                <CardBody tag={Flex} justify=\"between\" align=\"center\">\r\n                                    <h4 className=\"my-0 py-0\">Liabilities</h4>\r\n                                </CardBody>\r\n                            </Card>\r\n                            <Row noGutters>\r\n                                <Col lg className=\"mx-2\">\r\n                                    <LedgerCategory\r\n                                        classification=\"Liabilities\"\r\n                                        subClassification=\"Current\"\r\n                                        ledgers={ledgers}\r\n                                        setClassification={setClassification}\r\n                                        setSubClassification={setSubClassification}\r\n                                        setIsOpenModal={setIsOpenCreateModal}\r\n                                    />\r\n                                    <LedgerCategory\r\n                                        classification=\"Liabilities\"\r\n                                        subClassification=\"Payable\"\r\n                                        ledgers={ledgers}\r\n                                        setClassification={setClassification}\r\n                                        setSubClassification={setSubClassification}\r\n                                        setIsOpenModal={setIsOpenCreateModal}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg className=\"mx-2\">\r\n                                    <LedgerCategory\r\n                                        classification=\"Liabilities\"\r\n                                        subClassification=\"Long Term\"\r\n                                        ledgers={ledgers}\r\n                                        setClassification={setClassification}\r\n                                        setSubClassification={setSubClassification}\r\n                                        setIsOpenModal={setIsOpenCreateModal}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col lg={1} tag={Flex} align='top' justify=\"center\" className=\"d-none d-lg-flex\">\r\n                            <h3 className=\"my-3 py-0\">+</h3>\r\n                        </Col>\r\n                        <Col lg={2} className=\"order-5\">\r\n                            <Card className=\"bg-soft-info border cursor-pointer\" id=\"equity-card\">\r\n                                <CardBody tag={Flex} justify=\"between\" align=\"center\">\r\n                                    <h4 className=\"my-0 py-0\">Equity</h4>\r\n                                    <Button\r\n                                        color='falcon-primary'\r\n                                        className=\"ml-auto\"\r\n                                        onClick={() => {\r\n                                            setIsOpenCreateModal(true)\r\n                                            setClassification('Equity')\r\n                                            setSubClassification('')\r\n                                        }}\r\n                                        size=\"sm\"\r\n                                    >\r\n                                        <FontAwesomeIcon icon=\"plus\" />\r\n                                    </Button>\r\n                                </CardBody>\r\n                            </Card>\r\n                            <UncontrolledCollapse toggler=\"equity-card\">\r\n                                <LedgerList \r\n                                    ledgers={ledgers}\r\n                                    filter={ledger=>ledger.classification === 'Equity'}\r\n                                />\r\n                            </UncontrolledCollapse>\r\n                        </Col>\r\n                    </Row>\r\n                </CardBody>\r\n            </Card>\r\n            <Card className=\"mt-4\">\r\n                <FalconCardHeader title=\"Income Statement\">\r\n                    <ExportIncomeStatementButton />\r\n                </FalconCardHeader>\r\n                <CardBody>\r\n                    <Row noGutters>\r\n                        <Col lg={3}>\r\n                            <Card className=\"bg-soft-success border cursor-pointer\" id=\"revenue-card\">\r\n                                <CardBody tag={Flex} justify=\"between\" align=\"center\">\r\n                                    <h4 className=\"my-0 py-0 \">Revenues</h4>\r\n                                    <Button\r\n                                        color='falcon-primary'\r\n                                        className=\"ml-auto\"\r\n                                        onClick={() => {\r\n                                            setIsOpenCreateModal(true)\r\n                                            setClassification('Revenues')\r\n                                            setSubClassification('')\r\n                                        }}\r\n                                        size=\"sm\"\r\n                                    >\r\n                                        <FontAwesomeIcon icon=\"plus\" />\r\n                                    </Button>\r\n                                </CardBody>\r\n                            </Card>\r\n                            <UncontrolledCollapse toggler=\"revenue-card\">\r\n                                <LedgerList\r\n                                    filter={ledger => ledger.classification === 'Revenues'}\r\n                                    ledgers={ledgers}\r\n                                />\r\n                            </UncontrolledCollapse>\r\n                        </Col>\r\n                        <Col tag={Flex} align='top' justify=\"center\" className=\"mx-2\">\r\n                            <h3 className=\"my-3 py-0\">=</h3>\r\n                        </Col>\r\n                        <Col lg={4}>\r\n                            <Card className=\"bg-soft-danger border\">\r\n                                <CardBody tag={Flex} justify=\"between\" align=\"center\">\r\n                                    <h4 className=\"my-0 py-0\">Expenses</h4>\r\n                                </CardBody>\r\n                            </Card>\r\n                            <Row noGutters>\r\n                                <Col lg className=\"mx-2\">\r\n                                    <LedgerCategory\r\n                                        classification=\"Expenses\"\r\n                                        subClassification=\"Cost of Goods Sold\"\r\n                                        ledgers={ledgers}\r\n                                        setClassification={setClassification}\r\n                                        setSubClassification={setSubClassification}\r\n                                        setIsOpenModal={setIsOpenCreateModal}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg className=\"mx-2\">\r\n                                    <LedgerCategory\r\n                                        classification=\"Expenses\"\r\n                                        subClassification=\"Operating Expenses\"\r\n                                        ledgers={ledgers}\r\n                                        setClassification={setClassification}\r\n                                        setSubClassification={setSubClassification}\r\n                                        setIsOpenModal={setIsOpenCreateModal}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col tag={Flex} align='top' justify=\"center\" className=\"mx-2\">\r\n                            <h3 className=\"my-3 py-0\">+</h3>\r\n                        </Col>\r\n                        <Col lg={3}>\r\n                            <Card className=\"bg-soft-info border cursor-pointer\" id=\"operating-profit-card\">\r\n                                <CardBody tag={Flex} justify=\"between\" align=\"center\" >\r\n                                    <h4 className=\"my-0 py-0\">Operating Profit</h4>\r\n                                    <Button\r\n                                        color='falcon-primary'\r\n                                        className=\"ml-auto\"\r\n                                        onClick={() => {\r\n                                            setIsOpenCreateModal(true)\r\n                                            setClassification('Operating Profit')\r\n                                            setSubClassification('')\r\n                                        }}\r\n                                        size=\"sm\"\r\n                                    >\r\n                                        <FontAwesomeIcon icon=\"plus\" />\r\n                                    </Button>\r\n                                </CardBody>\r\n                            </Card>\r\n                            <UncontrolledCollapse toggler=\"operating-profit-card\">\r\n                               <LedgerList\r\n                                    filter={ledger=>ledger.classification === 'Operating Profit'}\r\n                                    ledgers={ledgers}\r\n                                /> \r\n                            </UncontrolledCollapse>\r\n                        </Col>\r\n                    </Row>\r\n                </CardBody>\r\n            </Card>\r\n            <Modal isOpen={isOpenCreateModal} toggle={() => setIsOpenCreateModal(false)}>\r\n                <ModalHeader className=\"bg-light border-bottom-0\">\r\n                    New Ledger - {classification + (subClassification ? ` (${subClassification})` : '')}\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <FormGroupInput\r\n                        label=\"Title\"\r\n                        value={newLedgerName}\r\n                        onChange={e => setNewLedgerName(e.target.value)}\r\n                    />\r\n                </ModalBody>\r\n                <ModalFooter className=\"bg-light border-top-0\">\r\n                    <Button size='sm' color=\"primary\" onClick={handleCreateLedger}>\r\n                        Submit\r\n                    </Button>\r\n                    <Button size='sm' color=\"secondary\" onClick={() => setIsOpenCreateModal(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Accounts;","////// Packages //////////////////\r\nimport FalconCardHeader from 'components/FalconCardHeader'\r\nimport LoadingGateway from 'components/LoadingGateway'\r\nimport React, { FC, useRef } from 'react'\r\nimport { Button, Card, CardBody, Col, Row } from 'reactstrap'\r\nimport { MExpenseReport } from 'store/types/models/finance'\r\nimport mime from 'mime-types';\r\n\r\n////// Local Components //////////\r\n\r\n////// Global Components /////////\r\n\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\nimport useExpense from 'store/hooks/finance/useExpense';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport dayjs from 'dayjs'\r\nimport usePerson from 'store/hooks/person/usePerson'\r\nimport makeName from 'helpers/makeName'\r\nimport Flex from 'components/Flex'\r\nimport { useSelector } from 'react-redux'\r\nimport { $fileserv, currencyFormat } from 'environ'\r\nimport FileThumbnail from 'components/FileThumbnail'\r\nimport FileThumbnailGroup from 'components/FileThumbnailGroup'\r\nimport { useReactToPrint } from 'react-to-print'\r\nimport { MFile } from 'store/types/models/workflow'\r\nimport { useParams } from 'react-router'\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\n\r\ninterface Props {\r\n}\r\n\r\nexport const expenses: (MExpenseReport & { stageIdentifier?: string, taskTitle?: string })[] = [\r\n    {\r\n        _id: '285g69ef',\r\n        title: 'First Expense Report',\r\n        description: `I went all around town, just lookin for a way to fill the old belly. \r\nStopped at several waterin holes, but found nothin quite as satisfying as the smooth taste of the blended Big Mac, or the tangy bite of the churros from Taco Bell. \r\n\r\nEnclosed is a record of the expenses incurred.`,\r\n        enteredBy: '605920824928e1bf8083de67',\r\n        enteredDate: '05-01-2021',\r\n        ledgerId: '219304866932ey4u5h',\r\n        ledgerName: 'Test Ledger',\r\n        contextId: '1498yq3wrtqwer',\r\n        stageId: '21348y9sdf43',\r\n        stageIdentifier: '20223A',\r\n        taskId: '234889ysdaf',\r\n        taskTitle: 'Fixing the hungry',\r\n        lines: [{\r\n            _id: '19023485y',\r\n            paymentMethod: 'Out of Pocket',\r\n            expenseDate: '2021-03-01',\r\n            description: 'Getting fast food',\r\n            vendorName: 'McDonalds',\r\n            receipts: [{\r\n                _id: 'q3245ruu0q34598r',\r\n                title: 'mcdreceipt.pdf',\r\n                location: '1238769-q548y9t-34895yt.pdf',\r\n                tags: ['fast food', 'meals'],\r\n                uploadDate: '2021-05-27',\r\n                uploadedBy: '605920824928e1bf8083de67',\r\n                '~secure~': true\r\n            }],\r\n            unitCost: 12.43,\r\n            quantity: 1,\r\n            cost: 12.43\r\n        }, {\r\n            _id: '1234987y7y',\r\n            paymentMethod: 'Company Card',\r\n            expenseDate: '2021-03-03',\r\n            description: 'Ring the bell',\r\n            vendorName: 'Taco Bell',\r\n            receipts: [{\r\n                _id: 'q3241234dasf',\r\n                title: 'tacos.pdf',\r\n                location: '1238769-345-34895yt.pdf',\r\n                tags: ['getting gas', 'meals'],\r\n                uploadDate: '2021-05-27',\r\n                uploadedBy: '605920824928e1bf8083de67',\r\n                '~secure~': true\r\n            }],\r\n            unitCost: 127.32,\r\n            quantity: 2,\r\n            cost: 254.64\r\n        }\r\n        ],\r\n        total: 267.07,\r\n        approval: {\r\n            approved: true,\r\n            approvedBy: '605a01bd63a52c0758741db2',\r\n            approvedDate: '2021-05-01'\r\n        }\r\n    },\r\n    {\r\n        _id: 'q23145reat',\r\n        title: 'Second Expense Report',\r\n        description: 'Nothing to report. Just sadness.',\r\n        enteredBy: '605a01bd63a52c0758741db2',\r\n        enteredDate: '05-11-2021',\r\n        ledgerId: '219304866932ey4u5h',\r\n        ledgerName: 'Next Ledger',\r\n        contextId: '1498yq3wrtqwer',\r\n        stageId: '21348y9sdf43',\r\n        stageIdentifier: '20223A',\r\n        taskId: '234889ysdaf',\r\n        taskTitle: 'Beating back the sad',\r\n        lines: [{\r\n            _id: '19023485y',\r\n            paymentMethod: 'Out of Pocket',\r\n            expenseDate: '2021-03-01',\r\n            description: 'giving 25 cents',\r\n            vendorName: 'my wallet',\r\n            receipts: [{\r\n                _id: 'q3245ruu0q34598r',\r\n                title: 'wallet.pdf',\r\n                location: '1238769-q548y9t-34895yt.pdf',\r\n                tags: ['sadness', 'spare-change'],\r\n                uploadDate: '2021-05-27',\r\n                uploadedBy: '27q105g98',\r\n                '~secure~': true\r\n            }],\r\n            unitCost: 0.25,\r\n            quantity: 1,\r\n            cost: 0.25\r\n        }],\r\n        total: 0.25,\r\n        approval: {\r\n            approved: true,\r\n            approvedBy: '605920824928e1bf8083de67',\r\n            approvedDate: '2021-05-27'\r\n        }\r\n    }\r\n]\r\n\r\nconst ExpenseReportCard: FC<Props> = () => {\r\n    // const {value: expense, ...expenseLoader} = useExpense(expenseId) as {value: MExpenseReport | undefined, loading: boolean}\r\n    const {expenseId} = useParams<{expenseId: string}>()\r\n    const expense = expenses.find(e => e._id === expenseId)\r\n    const people = useSelector(state => state.id.people)\r\n    const printRef = useRef<HTMLDivElement>(null)\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n        //bodyClass: \"mt-6 ml-6 mr-6\",\r\n        removeAfterPrint: true,\r\n        documentTitle: 'Expense Report - ' + expense?.title,\r\n        onBeforeGetContent: () => {\r\n            if (!expense) return\r\n            const rootEl = document.getElementById('receipts-root')\r\n            if (!rootEl) return console.log('receipt root element not found')\r\n            for (const line of expense.lines) {\r\n                if (!line.receipts) continue;\r\n                for (const receipt of line.receipts) {\r\n                    const path = $fileserv + '/' + receipt.location;\r\n                    const mimeType = mime.lookup(path)\r\n                    if (mimeType && mimeType.match(/^image/i)) {\r\n                        const titleEl = document.createElement('h6')\r\n                        titleEl.className = 'page-break'\r\n                        titleEl.textContent = receipt.title;\r\n                        rootEl.appendChild(titleEl)\r\n                        const el = document.createElement('img');\r\n                        el.src = path;\r\n                        el.alt = receipt.title;\r\n                        rootEl?.appendChild(el);\r\n                    } else if (mimeType) {\r\n                        const titleEl = document.createElement('h6')\r\n                        titleEl.className = 'page-break'\r\n                        titleEl.textContent = receipt.title;\r\n                        rootEl.appendChild(titleEl)\r\n                        const el = document.createElement('iframe')\r\n                        el.src = path;\r\n                        rootEl?.appendChild(el)\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        onAfterPrint: () => {\r\n            const rootEl = document.getElementById('receipts-root')\r\n            if (!rootEl) return;\r\n            while (rootEl.lastElementChild) {\r\n                rootEl.removeChild(rootEl.lastElementChild)\r\n            }\r\n        },\r\n        pageStyle: `\r\n            @media print {\r\n                body {\r\n                    margin-top: 0.75in;\r\n                    margin-left: 0.5in;\r\n                    margin-right: 0.5in;\r\n                    \r\n                }\r\n                html {\r\n                    font-size: 20px\r\n                }\r\n                .page-break {\r\n                    page-break-before: always\r\n                }\r\n                .print-hide {\r\n                    display: none!important\r\n                }\r\n            }\r\n        `\r\n    })\r\n\r\n    const expenseLoader = {\r\n        loading: false,\r\n        error: ''\r\n    }\r\n\r\n    return (\r\n        <LoadingGateway dataLoader={{ ...expenseLoader, error: expenseLoader.loading ? '' : !expense ? 'Data not found' : undefined }}>\r\n            <Card className=\"mt-3\">\r\n                <FalconCardHeader title=\"Expense Report\">\r\n                    <Button color=\"falcon-primary\" onClick={handlePrint}>\r\n                        <FontAwesomeIcon icon=\"print\" />\r\n                    </Button>\r\n\r\n                </FalconCardHeader>\r\n                <CardBody innerRef={printRef}>\r\n                    <Flex justify=\"between\">\r\n                        <div>\r\n                            <h5>{expense!.title}</h5>\r\n                            <h6>{expense!.ledgerName}</h6>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <h5 className=\"text-right\">{makeName(people[expense!.enteredBy]?.name)}</h5>\r\n                            <h6 className=\"text-right\">{dayjs(expense!.enteredDate).format(\"MMMM D, YYYY\")}</h6>\r\n                        </div>\r\n                    </Flex>\r\n                    <hr />\r\n                    <Row className=\"mt-3\">\r\n                        <Col xs={7}>\r\n                            {expense!.description.split('\\n').map((s, i) => <p key={i}>{s}</p>)}\r\n                            {(expense!.stageIdentifier || expense?.taskTitle) &&\r\n                                <Flex justify=\"end\">\r\n                                    <Card className=\"border\">\r\n                                        <CardBody className=\"d-flex\">\r\n                                            <h6 className=\"mr-2\">Chargeable to: </h6>\r\n                                            <div>\r\n                                                {expense!.stageIdentifier && <h6>{expense!.stageIdentifier}</h6>}\r\n                                                {expense!.taskTitle && <p className=\"my-0 fs--1\">{`Task: ${expense!.taskTitle}`}</p>}\r\n                                            </div>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                </Flex>\r\n                            }\r\n                        </Col>\r\n                        <Col xs={5} className=\"border border-2x rounded p-3 bg-light\">\r\n                            <h6>Payment Methods:</h6>\r\n                            {expense!.lines\r\n                                .reduce((methods, expense) => {\r\n                                    if (methods.find(m => m.method === expense.paymentMethod)) {\r\n                                        return methods.map(m => m.method === expense.paymentMethod ? { ...m, total: m.total + expense.cost } : m)\r\n                                    } else {\r\n                                        return [...methods, { method: expense.paymentMethod, total: expense.cost }]\r\n                                    }\r\n                                }, [] as { method: string, total: number }[])\r\n                                .map(m => (\r\n                                    <p className=\"mb-2 fs--1 ml-4\" key={m.method}>{`${m.method}: ${currencyFormat.format(m.total)}`}</p>\r\n                                ))\r\n                            }\r\n                            <hr />\r\n                            <Flex justify=\"between\">\r\n                                <h6>{`Total: ${currencyFormat.format(expense!.total)}`}</h6>\r\n                                {(expense!.approval?.approved) &&\r\n                                    <div className=\"border rounded p-2\">\r\n                                        <h6 className=\"mb-1\">\r\n                                            <FontAwesomeIcon icon={\"check\"} className=\"text-success fs--1 mr-1\" />\r\n                                            {`Approved by ${makeName(people[expense!.approval.approvedBy!]?.name)}`}\r\n                                        </h6>\r\n                                        <p className=\"fs--1 my-1 ml-4\">\r\n                                            {dayjs(expense!.approval.approvedDate).format('M/D/YYYY')}\r\n                                        </p>\r\n                                    </div>\r\n                                }\r\n                                {(expense!.approval?.declined) &&\r\n                                    <div className=\"border rounded p-2\">\r\n                                        <h6 className=\"mb-1\">\r\n                                            <FontAwesomeIcon icon={\"check\"} className=\"text-success fs--1 mr-1\" />\r\n                                            {`Declined by ${makeName(people[expense!.approval.declinedBy!]?.name)}`}\r\n                                        </h6>\r\n                                        <p className=\"fs--1 my-1 ml-4\">\r\n                                            {dayjs(expense!.approval.declinedDate).format('M/D/YYYY')}\r\n                                        </p>\r\n                                    </div>\r\n                                }\r\n                            </Flex>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <h5 className=\"mb-3\">Expenses</h5>\r\n                    <table width=\"100%\" className=\"expense-table fs--1 rounded\">\r\n                        <tr>\r\n                            <th>Payment Method</th>\r\n                            <th>Expense Date</th>\r\n                            <th>Description</th>\r\n                            <th>Vendor</th>\r\n                            <th className='print-hide'>Receipts</th>\r\n                            <th>Unit Cost</th>\r\n                            <th>Quantity</th>\r\n                            <th>Subtotal</th>\r\n                            <th>Reimbursed</th>\r\n                        </tr>\r\n                        {expense!.lines.map(l => (\r\n                            <tr key={l._id}>\r\n                                <td>{l.paymentMethod}</td>\r\n                                <td>{dayjs(l.expenseDate).format('M/D/YYYY')}</td>\r\n                                <td>{l.description}</td>\r\n                                <td>{l.vendorName}</td>\r\n                                <td className=\"print-hide\">{<FileThumbnailGroup files={l.receipts} idPrefix={'receipt-' + l._id} />}</td>\r\n                                <td>{currencyFormat.format(l.unitCost)}</td>\r\n                                <td>{l.quantity}</td>\r\n                                <td className=\"font-weight-bold\">{currencyFormat.format(l.cost)}</td>\r\n                                <td>{l.reimbursedDate && dayjs(l.reimbursedDate).format(\"M/D/YY\")}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </table>\r\n                    <div id=\"receipts-root\" />\r\n                    {/* <div>\r\n                        {expense!.lines\r\n                                    .reduce((all, line) => [...all, ...line.receipts], [] as MFile[])\r\n                                    .map( r => {\r\n                                        const path = $fileserv + '/' + r.location;\r\n                                        const mimeType = mime.lookup(path)\r\n                                        if (mimeType && mimeType.match(/^image/i)) {\r\n                                            return (\r\n                                                <div>\r\n                                                    <h6>{r.title}</h6>\r\n                                                    <img src={path} alt={r.title} />\r\n                                                </div>\r\n                                            )\r\n                                        } else if (mimeType) {\r\n                                            return (\r\n                                                <div>\r\n                                                    <h6>{ r.title }</h6>\r\n                                                    <iframe src={path} />\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        return null\r\n                                    })\r\n                        }\r\n                    </div> */}\r\n                </CardBody>\r\n            </Card>\r\n        </LoadingGateway>\r\n    )\r\n}\r\n\r\nexport default ExpenseReportCard","////// Packages //////////////////\r\nimport FalconCardHeader from 'components/FalconCardHeader'\r\nimport Flex from 'components/Flex'\r\nimport FormGroupInput from 'components/FormGroupInput'\r\nimport FormGroupSelect from 'components/FormGroupSelect'\r\nimport PersonMediaSmall from 'compositions/PersonMediaSmall'\r\nimport makeName from 'helpers/makeName'\r\nimport React, { FC, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Button, Card, CardBody, CardColumns, CardFooter, FormGroup, Label } from 'reactstrap'\r\nimport useOrgEmployees from 'store/hooks/person/useOrgEmployees'\r\nimport useEvaluatePermissions from 'store/hooks/user/useEvaluatePermissions'\r\nimport useMyPermissions from 'store/hooks/user/useMyPermissions'\r\nimport PERMISSIONS from 'store/permissions'\r\nimport { MPerson } from 'store/types/models/id'\r\n\r\n////// Local Components //////////\r\n\r\n////// Global Components /////////\r\n\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nconst NewExpenseReport: FC<Props> = () => {\r\n    \r\n    const loginPerson = useSelector( state => state.app.login.personId )\r\n    const { value: employeeList, ...employeeListLoader } = useOrgEmployees();\r\n    const canEnterAny = useEvaluatePermissions([PERMISSIONS.ENTER_ANY_EXPENSE]);\r\n    const enteredByOptions = employeeList\r\n                                ?.filter( e => canEnterAny || e._id === loginPerson)\r\n                                .map( e => (\r\n                                    {\r\n                                        ...e,\r\n                                        value: e._id, \r\n                                        label: makeName(e.name)\r\n                                    }\r\n                                ))\r\n\r\n    const [enteredBy, setEnteredBy] = useState(loginPerson);\r\n    const [description, setDescription] = useState<string>();\r\n    const [title, setTitle] = useState<string>();                   \r\n    function handleSubmit() {\r\n        alert('submitted')\r\n    }\r\n    \r\n    return (\r\n        <Card className=\"mt-3\">\r\n            <FalconCardHeader title=\"New Expense Report\" />\r\n            <CardBody>\r\n                <FormGroupSelect\r\n                    id=\"new-entry-entered-by\"\r\n                    label=\"Expense By\"\r\n                    placeholder=\"Select Person...\"\r\n                    classNamePrefix=\"react-select\"\r\n                    value={ enteredBy ? enteredByOptions?.find( e => e.value === enteredBy ) : undefined }\r\n                    options={ enteredByOptions }\r\n                    isLoading={ employeeListLoader.loading }\r\n                    formatOptionLabel={ option => option && <PersonMediaSmall person={ option as any} />}\r\n                    onChange={ option=>setEnteredBy(option?.value) }\r\n                />\r\n                <FormGroupInput \r\n                    id=\"new-expense-title\"\r\n                    label=\"Title\"\r\n                    placeholder=\"Report Title...\"\r\n                    value={title}\r\n                    onChange={e=>setTitle(e.target.value)}\r\n                />\r\n                <FormGroupInput\r\n                    id=\"new-expense-description\"\r\n                    label=\"Description\"\r\n                    placeholder=\"Description...\"\r\n                    type=\"textarea\"\r\n                    rows={ 4 }\r\n                    value={ description }\r\n                    onChange={ e => setDescription(e.target.value) }\r\n                />\r\n            </CardBody>\r\n            <CardFooter tag={Flex} justify=\"end\">\r\n                <Button color=\"primary\" onClick={handleSubmit}>Submit</Button>\r\n            </CardFooter>\r\n            <CardColumns />\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default NewExpenseReport","////// Packages //////////////////\r\nimport PaginatingTableCard, { CustomSearchColumn } from 'compositions/table/PaginatingTableCard'\r\nimport React, { FC, useRef, useState } from 'react'\r\n\r\nimport dayjs from 'dayjs'\r\n////// Local Components //////////\r\nimport ExpenseReportCard, {expenses} from './ExpenseReportCard';\r\n\r\n////// Global Components /////////\r\nimport NameFormatter from 'compositions/NameFormatter';\r\n\r\n////// CommonJS Helpers //////////\r\nimport makeName from 'helpers/makeName'\r\nimport { currencyFormat } from 'environ';\r\n\r\n////// Custom Hooks //////////////\r\nimport usePeopleList from 'store/hooks/person/usePeopleList'\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\nimport { MExpenseReport } from 'store/types/models/finance'\r\nimport { Route, Switch, useHistory, useRouteMatch } from 'react-router';\r\nimport NewExpenseReport from './NewExpenseReport';\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nconst Expenses: FC<Props> = () => {\r\n    // const {value: expenses} = useExpenses(filter?)\r\n    const { url } = useRouteMatch()\r\n    const history = useHistory()\r\n    const distinctIds = Array.from( new Set( expenses.map(e=>e.enteredBy) ) )\r\n    const {value: people} = usePeopleList(...distinctIds)\r\n    \r\n    type PopulatedExpense = typeof populatedExpenses[0]\r\n    const populatedExpenses = expenses.map( e => ({...e, enteredByPerson: people?.find( p => p._id === e.enteredBy )}) )\r\n\r\n    const columns: CustomSearchColumn[] = [\r\n        {\r\n            dataField: 'title',\r\n            text: 'Title',\r\n            search: true,\r\n            sort: true,\r\n            headerClasses: 'border-0',\r\n            classes: 'border-0 py-2 align-middle'\r\n            \r\n        },\r\n        {\r\n            dataField: 'total',\r\n            text: 'Total',\r\n            sort: true,\r\n            headerClasses: 'border-0',\r\n            classes: 'border-0 py-2 align-middle',\r\n            formatter: total => currencyFormat.format(total)\r\n        },\r\n        {\r\n            dataField: 'enteredDate',\r\n            text: 'Entered Date',\r\n            sort: true,\r\n            headerClasses: 'border-0',\r\n            classes: 'border-0 py-2 align-middle',\r\n            formatter: (cell) => dayjs(cell).format('MM/DD/YYYY')\r\n        },\r\n        {\r\n            dataField: 'ledgerName',\r\n            text: 'Category',\r\n            sort: true,\r\n            search: true,\r\n            headerClasses: 'border-0',\r\n            classes: 'border-0 py-2 align-middle'\r\n        },\r\n        {\r\n            dataField: 'stageIdentifier',\r\n            text: 'Chargeable To',\r\n            sort: true,\r\n            search: data => data.stageIdentifier + ' ' + data.taskTitle,\r\n            headerClasses: 'border-0',\r\n            classes: 'border-0 py-2 align-middle',\r\n            formatter: (cell, row) => `${row.stageIdentifier} (${row.taskTitle})`\r\n        },\r\n        {\r\n            dataField: 'enteredByPerson.name.last',\r\n            text: 'Entered By',\r\n            csvFormatter: (cell, row) => makeName(row.enteredByPerson?.name, {first: true, last: true, reverse: true}),\r\n            headerClasses: 'border-0',\r\n            classes: 'border-0 py-2 align-middle',\r\n            formatter: (cell, row) => <NameFormatter \r\n                                        _id={row.enteredByPerson?._id} \r\n                                        name={row.enteredByPerson?.name} \r\n                                        avatar={row.enteredByPerson?.avatar}\r\n                                       />,\r\n            sort: true,\r\n            search: data => makeName(data.enteredByPerson?.name, { flat: true })                    \r\n        }\r\n    ]\r\n    \r\n    const csvExportRef = useRef<any>()\r\n\r\n    function handleSelectRow(row: typeof populatedExpenses[0]) {\r\n        history.push(`${url}/${row._id}`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PaginatingTableCard\r\n                title=\"Expenses\"\r\n                data={populatedExpenses}\r\n                columns={columns}\r\n                paginationOptions={{\r\n                    sizePerPage: 12\r\n                }}\r\n                onSelectRow={handleSelectRow}\r\n                csvExportRef={csvExportRef}\r\n                exportCSV={{fileName: 'Happin Expenses Report ' + dayjs().format('MM-DD-YYYY') + '.csv'}}\r\n                handleNew={()=>history.push(`${url}/new`)}\r\n                search\r\n            />\r\n            <Switch>\r\n                <Route path={`${url}/new`} component={NewExpenseReport} />\r\n                <Route path={`${url}/:expenseId`} component={ExpenseReportCard} />\r\n            </Switch>\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Expenses","////// Packages //////////////////\r\nimport UnderConstruction from 'layouts/errors/UnderConstruction'\r\nimport Accounts from 'layouts/finance/accounts/Accounts'\r\nimport Expenses from 'layouts/finance/expenses/Expenses'\r\nimport React, { FC } from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router'\r\n\r\n////// Local Components //////////\r\n\r\n////// Global Components /////////\r\n\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nconst FinanceRoutes: FC<Props> = ({ match: { url } }) => (\r\n    <Switch>\r\n      <Route path={`${url}/expenses`} component={Expenses} />\r\n      <Route path={`${url}/contracts`} component={UnderConstruction} />\r\n      <Route path={`${url}/invoices`} component={UnderConstruction} /> \r\n      <Route path={`${url}/payable`} component={UnderConstruction} /> \r\n      <Route path={`${url}/receivable`} component={UnderConstruction} /> \r\n      <Route path={`${url}/wages`} component={UnderConstruction} /> \r\n      <Route path={`${url}/accounts`} component={Accounts} />\r\n      {/*Redirect*/}\r\n      <Redirect to=\"/errors/404\" />\r\n    </Switch>\r\n)\r\n\r\nexport default FinanceRoutes","import React, { FC } from 'react';\r\nimport { FormGroup, Input, InputProps, Label, LabelProps, FormFeedback } from 'reactstrap';\r\n\r\ninterface Props extends InputProps {\r\n  label?: string;\r\n  formClass?: string;\r\n  feedback?: React.ReactNode;\r\n  isTooltipFeedback?: boolean;\r\n  labelProps?: LabelProps;\r\n}\r\nconst FormGroupInput: FC<Props> = ({ label, formClass='', feedback, valid, invalid, isTooltipFeedback, labelProps, ...rest }) => {\r\n  const {id, ...inputProps} = rest;\r\n  return (\r\n    <FormGroup className={formClass}>\r\n      {label && <Label htmlFor={id} {...labelProps} >{label}</Label>}\r\n      <Input id={id} valid={valid} invalid={invalid} {...inputProps} />\r\n      {feedback && <FormFeedback valid={valid} invalid={invalid} tooltip={isTooltipFeedback}>{feedback}</FormFeedback>}\r\n    </FormGroup>\r\n  )\r\n};\r\n\r\nexport default FormGroupInput;","import React, { FC } from 'react';\r\nimport Loader from './Loader';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Col, Row } from 'reactstrap';\r\n\r\ninterface Props {\r\n    dataLoader: {loading?: boolean; error?: any;};\r\n    size?: 's' | 'm' | 'l' | 'xl';\r\n    children: any;\r\n    className?: string;\r\n}\r\n\r\nconst LoadingGateway: FC<Props> = ({dataLoader, size='l', className, children}) => {\r\n    const sizeClass = {\r\n        s: 'fs-0',\r\n        m: 'fs-1',\r\n        l: 'fs-2',\r\n        xl: 'fs-4'\r\n    }\r\n\r\n    if (dataLoader?.loading) {\r\n        return <Loader />\r\n    }\r\n\r\n    if (dataLoader?.error) {\r\n        return ( \r\n            <>\r\n                <Row className={\"flex-center py-5 \" + className}>\r\n                    <Col xs=\"auto\">\r\n                        <FontAwesomeIcon icon='exclamation-circle' className={[sizeClass, 'text-danger'].join(' ')} />\r\n                    </Col>\r\n                </Row>\r\n                <Row className={\"flex-center py-5 \" + className}>\r\n                    {dataLoader.error}\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return <>{ children }</>;\r\n};\r\n\r\nexport default LoadingGateway;\r\n","import React, {FC} from 'react';\r\nimport classNames from 'classnames';\r\nimport { Button, ButtonProps } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Transform, IconProp } from '@fortawesome/fontawesome-svg-core'\r\n\r\n\r\nexport interface Props extends ButtonProps {\r\n  iconAlign?: 'right' | 'left',\r\n  iconClassName?: string;\r\n  transform?: string | Transform ;\r\n  icon: IconProp;\r\n}\r\n\r\nconst ButtonIcon: FC<Props> = ({ icon, iconAlign='left', iconClassName, transform, children, ...rest }) => (\r\n  <Button {...rest}>\r\n    {iconAlign === 'right' && children}\r\n    <FontAwesomeIcon\r\n      icon={icon}\r\n      className={classNames(iconClassName, {\r\n        'mr-1': children && iconAlign === 'left',\r\n        'ml-1': children && iconAlign === 'right'\r\n      })}\r\n      transform={transform}\r\n    />\r\n    {iconAlign === 'left' && children}\r\n  </Button>\r\n);\r\n\r\nexport default ButtonIcon;\r\n","import React, {FC} from 'react';\r\nimport {  FormGroup, Label, LabelProps } from 'reactstrap';\r\nimport Select, {Props as SelectProps } from 'react-select';\r\n\r\nexport type FormGroupSelectOptions = { value: (string | number | readonly string[] | undefined), label: React.ReactNode }[]\r\n\r\ninterface Props extends SelectProps<any, false> {\r\n  id: string;\r\n  label: string;\r\n  labelProps?: LabelProps\r\n}\r\n\r\nconst FormGroupSelect: FC<Props> = ({ id, label, styles, labelProps, ...inputProps }) => (\r\n  <FormGroup>\r\n    {label && <Label for={id} {...labelProps}>{label}</Label>}\r\n      <Select \r\n        classNamePrefix=\"react-select\" \r\n        id={id} \r\n        styles={{\r\n          ...styles,\r\n          menu: provided => ({...provided, zIndex: 999})\r\n        }}\r\n        {...inputProps} />\r\n      {/* //   {options && isIterableArray(options) &&\r\n      //     options.map(({ value, label }, index) => (\r\n      //       <option value={value} key={index} dangerouslySetInnerHTML={createMarkup(label)} />\r\n      //     ))}\r\n      // </Select> */}\r\n  </FormGroup>\r\n);\r\n\r\nexport default FormGroupSelect;\r\n","import React, { FC } from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport SpinnerLogo, { Props } from 'components/SpinnerLogo'\r\n\r\nconst Loader: FC<Props> = props => (\r\n  <Row className=\"flex-center py-5\">\r\n    <Col xs=\"auto\">\r\n      <SpinnerLogo width={50} {...props} />\r\n    </Col>\r\n  </Row>\r\n);\r\n\r\nexport default Loader;\r\n","const andRegexFromString = (str: string) => {\r\n    if (!str) return /./\r\n    const andSearchString = str.split(' ').map(s => '(?=.*' + s.trim() + ')').join('')\r\n    return new RegExp(andSearchString, 'i');\r\n}\r\n\r\nexport default andRegexFromString;","////// Packages //////////////////\r\nimport React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, CardBody } from 'reactstrap';\r\n\r\n////// Local Components //////////\r\n\r\n////// Global Components /////////\r\n\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\n\r\n////// Thunks ////////////////////\r\n\r\n\r\nconst UnderConstruction = () => (\r\n  <Card className=\"text-center\">\r\n    <CardBody className=\"p-5\">\r\n      <div className=\"display-1 text-200 fs-error\">Working On It</div>\r\n      <p className=\"lead mt-4 text-800 text-sans-serif font-weight-semi-bold\">\r\n        {`The page you're looking for is under construction.`}\r\n      </p>\r\n      <hr />\r\n      <p>\r\n        {`We are hard at work building the most intuitive business management app on the web`}\r\n        <a href=\"mailto:info@happin.design\" className=\"ml-1\">\r\n          We would love to hear from you. Contact Us\r\n        </a>\r\n        .\r\n      </p>\r\n      <Link className=\"btn btn-primary btn-sm mt-3\" to=\"/\">\r\n        <FontAwesomeIcon icon=\"home\" className=\"mr-2\" />\r\n        Take me home\r\n      </Link>\r\n    </CardBody>\r\n  </Card>\r\n);\r\n\r\nexport default UnderConstruction;\r\n","////// Packages //////////////////\r\nimport React, {FC} from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\n\r\n////// Local Components //////////\r\n\r\n////// Global Components /////////\r\nimport Avatar from 'components/Avatar';\r\n\r\n////// CommonJS Helpers //////////\r\nimport makeName from 'helpers/makeName';\r\n\r\n////// Custom Hooks //////////////\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\nimport { MPerson } from 'store/types/models/id';\r\n\r\n\r\ninterface Props {\r\n    person: MPerson | null | undefined\r\n}\r\n\r\nconst PersonMediaSmall: FC<Props> = ({person}) => {\r\n        if (!person) return null\r\n        const personName = makeName(person.name, {first: true, last: true})\r\n        return <Row>\r\n                    <Col xs='auto'>\r\n                        <Avatar size=\"l\" src={person.avatar?.location} name={ personName } />\r\n                    </Col>\r\n                    <Col className='d-flex align-middle flex-column'>\r\n                        <h6 className='my-0'>{ personName }</h6>\r\n                        <span className='my-0 fs--1'>{ person.position}</span>\r\n                    </Col>\r\n                </Row>\r\n}\r\n\r\nexport default PersonMediaSmall;","import { shallowEqual, useSelector } from 'react-redux';\r\nimport { people } from 'store/thunks/people';\r\nimport useLoadAndSelect from 'store/hooks/useLoadAndSelect';\r\nimport { MPerson } from 'store/types/models/id';\r\n\r\nfunction useOrgEmployees(organizationId?: string) {\r\n    const myOrgId = useSelector( state => state.app.login.organizationId )\r\n    const selectedOrg = organizationId || myOrgId;\r\n\r\n    const peopleBasicInfo = useLoadAndSelect<MPerson[]>({\r\n        actionCreator: people.getOrgEmployees,\r\n        selector: state => {\r\n            const personList = Object.values(state.id.people)\r\n            const result = personList.filter( person => person.organizationId === selectedOrg )\r\n            return result\r\n        },\r\n        postParams: selectedOrg,\r\n        deduplicate: ['getOrgEmployees', selectedOrg]\r\n    })\r\n\r\n    return peopleBasicInfo;\r\n}\r\n\r\nexport default useOrgEmployees;","////// Packages //////////////////\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getPaginationArray } from 'helpers/utils';\r\nimport React, { FC } from 'react'\r\nimport BootstrapTable, { BootstrapTableProps, PaginationOptions } from 'react-bootstrap-table-next';\r\nimport paginationFactory, { PaginationProvider } from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { CSVProps } from 'react-bootstrap-table2-toolkit';\r\nimport { Button, Card, CardBody, Col, Row } from 'reactstrap';\r\n\r\n////// Local Components //////////\r\n\r\n////// Global Components /////////\r\n\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\n\r\ninterface BootstrapPropsPartial extends Partial<BootstrapTableProps> { }\r\ninterface PaginationChildProps extends PaginationOptions {\r\n    tableId?: string;\r\n    bootstrap4?: boolean;\r\n}\r\ninterface FixedFactoryProps {\r\n    paginationProps: PaginationChildProps;\r\n    paginationTableProps: BootstrapPropsPartial;\r\n}\r\n\r\n\r\nexport interface PaginatingTableProps extends Omit<BootstrapTableProps, 'keyField'> {\r\n    paginationOptions: PaginationOptions,\r\n    csvExportRef?: React.MutableRefObject<{ onExport(): void } | undefined>,\r\n    exportCSV?: boolean | CSVProps;\r\n    keyField?: string;\r\n    onSelectRow?: (row: any)=>void;\r\n}\r\n\r\nconst DefaultNoData = () => (\r\n    <Card>\r\n        <CardBody>\r\n            No Data Available\r\n        </CardBody>\r\n    </Card>\r\n)\r\n\r\n\r\nconst PaginatingTable: FC<PaginatingTableProps> = ({\r\n    paginationOptions,\r\n    csvExportRef,\r\n    data,\r\n    columns,\r\n    classes = \"table-dashboard table-striped table-sm fs--1 border-bottom border-200 mb-0 table-dashboard-th-nowrap\",\r\n    rowClasses = \"btn-reveal-trigger border-top border-200\",\r\n    headerClasses = \"bg-200 text-900 border-y border-200\",\r\n    bordered = false,\r\n    exportCSV,\r\n    keyField = \"_id\",\r\n    hover=true,\r\n    noDataIndication=DefaultNoData,\r\n    tabIndexCell=true,\r\n    defaultSortDirection=\"asc\",\r\n    rowStyle,\r\n    onSelectRow,\r\n    ...otherTableProps\r\n}) => {\r\n\r\n    const handleNextPage = ({ page, onPageChange }: PaginationChildProps) => () => {\r\n        onPageChange && onPageChange(page! + 1, paginationOptions.sizePerPage!);\r\n    };\r\n\r\n    const handlePrevPage = ({ page, onPageChange }: PaginationChildProps) => () => {\r\n        onPageChange && onPageChange(page! - 1, paginationOptions.sizePerPage!);\r\n    };\r\n\r\n    return (\r\n\r\n        <PaginationProvider pagination={paginationFactory(paginationOptions)}>\r\n            {({ paginationProps, paginationTableProps }: FixedFactoryProps) => {\r\n                const lastIndex = paginationProps.page! * paginationProps.sizePerPage!;\r\n                return (\r\n                    <>\r\n                        <div className=\"table-responsive\">\r\n                            <ToolkitProvider\r\n                                keyField=\"_id\"\r\n                                data={data}\r\n                                columns={columns}\r\n                                bootstrap4\r\n                                exportCSV={exportCSV}\r\n                            >\r\n                                {\r\n                                    ({ baseProps, csvProps }) => {\r\n                                        if (csvExportRef) csvExportRef.current = csvProps\r\n                                        return (\r\n                                            <BootstrapTable\r\n                                                bordered={bordered}\r\n                                                classes={classes}\r\n                                                rowClasses={rowClasses}\r\n                                                headerClasses={headerClasses}\r\n                                                hover={hover}\r\n                                                noDataIndication={noDataIndication}\r\n                                                tabIndexCell={tabIndexCell}\r\n                                                defaultSortDirection={defaultSortDirection}\r\n                                                rowStyle={{cursor: 'pointer', ...rowStyle}}\r\n                                                selectRow={onSelectRow && {\r\n                                                    mode: 'radio',\r\n                                                    clickToSelect: true,\r\n                                                    hideSelectColumn: true,\r\n                                                    classes: 'bg-soft-primary',\r\n                                                    onSelect: onSelectRow\r\n                                                }}\r\n                                                {...otherTableProps}\r\n                                                {...baseProps}\r\n                                                {...paginationTableProps}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                }\r\n                            </ToolkitProvider>\r\n                        </div>\r\n                        <Row noGutters className=\"px-1 py-3 flex-center\">\r\n                            <Col xs=\"auto\">\r\n                                <Button\r\n                                    color=\"falcon-default\"\r\n                                    size=\"sm\"\r\n                                    onClick={handlePrevPage(paginationProps)}\r\n                                    disabled={paginationProps.page === 1}\r\n                                >\r\n                                    <FontAwesomeIcon icon=\"chevron-left\" />\r\n                                </Button>\r\n                                {getPaginationArray(paginationProps.totalSize!, paginationProps.sizePerPage!).map(pageNo => (\r\n                                    <Button\r\n                                        color={paginationProps.page === pageNo ? 'falcon-primary' : 'falcon-default'}\r\n                                        size=\"sm\"\r\n                                        className=\"ml-2\"\r\n                                        onClick={() => paginationProps.onPageChange!(pageNo, paginationProps.sizePerPage!)}\r\n                                        key={pageNo}\r\n                                    >\r\n                                        {pageNo}\r\n                                    </Button>\r\n                                ))}\r\n                                <Button\r\n                                    color=\"falcon-default\"\r\n                                    size=\"sm\"\r\n                                    className=\"ml-2\"\r\n                                    onClick={handleNextPage(paginationProps)}\r\n                                    disabled={lastIndex >= paginationProps.totalSize!}\r\n                                >\r\n                                    <FontAwesomeIcon icon=\"chevron-right\" />\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </>\r\n                );\r\n            }}\r\n        </PaginationProvider>\r\n    )\r\n}\r\n\r\nexport default PaginatingTable\r\n","////// Packages //////////////////\r\nimport React, { FC, useEffect, useState } from 'react'\r\nimport { Card, CardBody, Form } from 'reactstrap'\r\n\r\n////// Local Components //////////\r\nimport PaginatingTable, {PaginatingTableProps} from './PaginatingTable'\r\n\r\n////// Global Components /////////\r\nimport FalconCardHeader from 'components/FalconCardHeader'\r\nimport ButtonIcon from 'components/ButtonIcon'\r\nimport SearchBox from 'compositions/SearchBox'\r\nimport andRegexFromString from 'helpers/andRegexFromString'\r\nimport { ColumnDescription } from 'react-bootstrap-table-next'\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\n\r\n\r\n// eslint-disable-next-line\r\nexport interface CustomSearchColumn<T extends object=any, U=any> extends ColumnDescription<T, U> {\r\n    search?: boolean | ( (data: any) => string )\r\n}\r\n\r\ninterface Props extends PaginatingTableProps {\r\n    title: string;\r\n    cardClass?: string;\r\n    handleNew?: () => void;\r\n    handleFilter?: () => void;\r\n    handleExport?: (() => void) | false;\r\n    filterContent?: React.ReactNode;\r\n    componentSize?: \"sm\" | \"md\" | \"lg\";\r\n    columns: CustomSearchColumn[];\r\n    onSearchText?: (text: string)=>void\r\n}\r\n\r\nconst PaginatingTableCard: FC<Props> = ({ \r\n    title, \r\n    cardClass, \r\n    handleNew, \r\n    handleFilter, \r\n    handleExport, \r\n    filterContent, \r\n    csvExportRef, \r\n    search, \r\n    componentSize=\"sm\",\r\n    data, \r\n    columns, \r\n    paginationOptions,\r\n    onSearchText,\r\n    ...rest\r\n}) => {\r\n    const defaultExport = csvExportRef && ( () => {console.log(csvExportRef.current) ; csvExportRef.current?.onExport() } )\r\n    \r\n    const selectedExport = handleExport === false ? undefined : (handleExport || defaultExport)\r\n\r\n    const [searchText, setSearchText] = useState('');\r\n\r\n    useEffect(()=>onSearchText && onSearchText(searchText), [searchText])\r\n\r\n    const searchPattern = andRegexFromString(searchText);\r\n\r\n    const filteredData = searchText \r\n                            ? data.filter( d => columns\r\n                                                .map( c => {\r\n                                                    if (c.search) {\r\n                                                        if (c.search === true) {\r\n                                                            const fields = c.dataField.split('.')\r\n                                                            let searchData = d\r\n                                                            for (const f of fields) {\r\n                                                                searchData = typeof searchData === 'object' ? searchData[f] : undefined\r\n                                                            }\r\n                                                            if (searchData) return searchData\r\n                                                        } else {\r\n                                                            return c.search(d)\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                .filter(s=>s)\r\n                                                .join(' ')\r\n                                                .match(searchPattern)\r\n                                )\r\n                            : data\r\n\r\n\r\n    return (\r\n        <Card className={cardClass}>\r\n            <FalconCardHeader title={title} light={false}>\r\n                <Form inline>\r\n                    { search && <SearchBox bsSize={componentSize === \"md\" ? undefined: componentSize} value={searchText} onChange={e=>setSearchText(e.target.value)}/> }\r\n                    {handleNew && \r\n                        <ButtonIcon\r\n                            icon=\"plus\"\r\n                            transform=\"shrink-3 down-2\"\r\n                            color=\"falcon-default\"\r\n                            size={componentSize}\r\n                            className=\"ml-2\"\r\n                            onClick={handleNew}\r\n                        >\r\n                            New\r\n                        </ButtonIcon>\r\n                    }\r\n                    {handleFilter && \r\n                        <ButtonIcon\r\n                            icon=\"filter\"\r\n                            transform=\"shrink-3 down-2\"\r\n                            color=\"falcon-default\"\r\n                            size={componentSize}\r\n                            className=\"ml-2\"\r\n                            onClick={handleFilter}\r\n                        >\r\n                            Filter\r\n                        </ButtonIcon>\r\n                    }\r\n                    {selectedExport && \r\n                        <ButtonIcon\r\n                            icon=\"external-link-alt\"\r\n                            transform=\"shrink-3 down-2\"\r\n                            color=\"falcon-default\"\r\n                            size={componentSize}\r\n                            className=\"ml-2\"\r\n                            onClick={selectedExport}\r\n                        >\r\n                            Export\r\n                        </ButtonIcon>\r\n                    }\r\n                </Form>\r\n                \r\n            </FalconCardHeader>\r\n            <CardBody className=\"p-0\">\r\n                { filterContent }\r\n                <PaginatingTable\r\n                    csvExportRef={csvExportRef}\r\n                    columns={columns}\r\n                    data={filteredData}\r\n                    paginationOptions={{\r\n                        ...paginationOptions,\r\n                        custom: true,\r\n                        totalSize: filteredData.length || 1\r\n                    }}\r\n                    {...rest}\r\n                />\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default PaginatingTableCard","import { union } from 'lodash'\r\nimport { useSelector, shallowEqual } from 'react-redux'\r\nimport useMyUser from './useMyUser';\r\n \r\nfunction useMyPermissions (): string[] { \r\n    const {value: user} = useMyUser();\r\n\r\n    const myPermissions = useSelector(state => {\r\n        const explicitPermissions = user?.explicitPermissions;\r\n        const permissionsGroup = user?.groupId;\r\n        const groupPermissions = state.id.usergroups?.[permissionsGroup || '']?.permissions;\r\n        return union(explicitPermissions, groupPermissions);\r\n    }, shallowEqual);\r\n\r\n    return myPermissions\r\n}\r\n\r\nexport default useMyPermissions;","import { MExpense, MExpenseReport, MLedger, MWage } from \"store/types/models/finance\";\r\nimport { MPerson } from \"store/types/models/id\";\r\nimport {wages as wagesDuck, expenses as expensesDuck} from 'store/ducks/finance'\r\nimport { BaseDuck } from \"store/ducks/BaseDuck\";\r\nimport { ActionCreator } from \"store/types/interface/common\";\r\nimport {ledgers as ledgerDuck} from 'store/ducks/finance'\r\n\r\ninterface WageController extends BaseDuck<MWage> {\r\n    createWage: ActionCreator<['createWage']>;\r\n    getPersonWages: ActionCreator<['getPersonWages']>\r\n    deleteWage: ActionCreator<['deleteWage']>\r\n}\r\n\r\ninterface ExpenseController extends BaseDuck<MExpenseReport> {\r\n    getExpense: ActionCreator<['getExpense']>\r\n}\r\n\r\ninterface LedgerController extends BaseDuck<MLedger> {\r\n    getLedger: ActionCreator<['getLedger']>\r\n    getLedgers: ActionCreator<['getLedgers']>\r\n    createLedger: ActionCreator<['createLedger']>\r\n}\r\n\r\nexport const wages = wagesDuck as WageController\r\nexport const expenses = expensesDuck as ExpenseController\r\nexport const ledger = ledgerDuck as LedgerController\r\n\r\ninterface CreateWageProps {\r\n    personId: MPerson[\"_id\"], \r\n    effectiveDate: string, \r\n    wageAmount: number, \r\n    wageType: string | MWage['wageType'], \r\n    salaryPeriod: string | MWage['salaryPeriod'], \r\n    hourlyRate: number, \r\n    overtimeEligible?: boolean, \r\n    doubleTimeEligible?: boolean\r\n}\r\n\r\nexport const createWage: ActionCreator<['createWage']> = (wage: CreateWageProps) => {\r\n    const actions = [\r\n        {\r\n            name: 'createWage',\r\n            data: wage\r\n        }\r\n    ] as const;\r\n    return { actions }\r\n}\r\nwages.createWage = createWage\r\n\r\n\r\nexport const getPersonWages: ActionCreator<['getPersonWages']> = (personId: MPerson['_id']) => {\r\n    const actions = [{\r\n        name: 'getPersonWages',\r\n        data: {personId}\r\n    }] as const;\r\n    return { actions }\r\n}\r\n\r\nwages.getPersonWages = getPersonWages\r\n\r\nexport const deleteWage: ActionCreator<['deleteWage']> = (wageId: MWage['_id']) => {\r\n    const actions = [{\r\n        name: \"deleteWage\",\r\n        data: {wageId}\r\n    }] as const;\r\n    return { actions }\r\n}\r\n\r\nwages.deleteWage = deleteWage\r\n\r\n\r\n////////// expenses thunks ////////////////////\r\n\r\nexport const getExpense: ActionCreator<['getExpense']> = (expenseId: MExpenseReport['_id']) => {\r\n    const actions = [{\r\n        name: \"getExpense\",\r\n        data: {expenseId}\r\n    }] as const;\r\n    return { actions }\r\n}\r\nexpenses.getExpense = getExpense\r\n\r\n///////// ledger thunks //////////////////////\r\n\r\nexport const getLedger: ActionCreator<['getLedger']> = (ledger: MLedger) => {\r\n    const actions = [{\r\n        name: 'getLedger',\r\n        data: {ledger}\r\n    }] as const;\r\n    return {actions}\r\n}\r\n\r\nledger.getLedger = getLedger\r\n\r\nexport const getLedgers: ActionCreator<['getLedgers']> = () => {\r\n    const actions = [{\r\n        name: 'getLedgers',\r\n        data: {}\r\n    }] as const;\r\n    return {actions}\r\n}\r\n\r\nledger.getLedgers = getLedgers\r\n\r\nexport const createLedger: ActionCreator<['createLedger']> = (classification: string, subClassification: string, name: string) => {\r\n    const actions = [{\r\n        name: 'createLedger',\r\n        data: {\r\n            name,\r\n            classification,\r\n            subClassification\r\n        }\r\n    }] as const;\r\n    return {actions}\r\n}\r\n\r\nledger.createLedger = createLedger\r\n","import React, {FC} from 'react';\r\n\r\nimport Avatar from \"components/Avatar\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Media } from \"reactstrap\";\r\n\r\nimport { MPerson } from 'store/types/models/id';\r\nimport Flex from 'components/Flex';\r\nimport makeName from 'helpers/makeName';\r\n\r\ninterface NameFormatterProps {\r\n    _id: MPerson['_id'],\r\n    avatar: MPerson['avatar'],\r\n    name: MPerson['name']\r\n}\r\n\r\nconst NameFormatter: FC<NameFormatterProps> = ({ _id, avatar, name }) => {\r\n  const displayName = makeName(name, { first: true, common: true, last: true })\r\n  return (\r\n    <Link to={`/admin/user-details/${_id}`}>\r\n      <Media tag={Flex} align=\"center\">\r\n        <Avatar src={avatar?.location} name={displayName} />\r\n        <Media body className=\"ml-2\">\r\n          <h5 className=\"mb-0 fs--1\">{displayName}</h5>\r\n        </Media>\r\n      </Media>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default NameFormatter","import { intersection } from \"lodash\";\r\nimport PERMISSIONS from \"store/permissions\";\r\nimport useMyPermissions from \"./useMyPermissions\";\r\n\r\n\r\nfunction useEvaluatePermissions(testPermissions: string[]) {\r\n    const permissions = useMyPermissions();\r\n    return intersection([...testPermissions, PERMISSIONS.GLOBAL_ADMIN], permissions)?.length > 0\r\n}\r\n\r\nexport default useEvaluatePermissions","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\ntype DocIcon = \"file\" | \"file-pdf\" | \"file-word\" | \"file-excel\" | \"image\";\r\n\r\nconst iconMap: Record<DocIcon, { extensions: RegExp; color: string }> = {\r\n  \"file-pdf\": {\r\n    extensions: /\\.pdf$/i,\r\n    color: \"rgb(212, 49, 49)\"\r\n  },\r\n  \"file-word\": {\r\n    extensions: /\\.doc$|\\.docx$|\\.odt$/i,\r\n    color: \"rgb(49, 108, 212)\"\r\n  },\r\n  \"file-excel\": {\r\n    extensions: /\\.xls$|\\.xlsx$|\\.xlsm$/i,\r\n    color: \"rgb(37, 125, 55)\"\r\n  },\r\n  image: {\r\n    extensions: /\\.png$|\\.jpg$|\\.gif$|\\.tiff$|\\.jpeg/i,\r\n    color: \"rgb(0, 204, 255)\"\r\n  },\r\n  file: {\r\n    extensions: /./,\r\n    color: \"rgb(240, 220, 120)\"\r\n  }\r\n};\r\n\r\nfunction getDocumentIcon(docName: string): React.ReactNode {\r\n  let icon: keyof typeof iconMap;\r\n  for (icon in iconMap) {\r\n    if (iconMap[icon].extensions.test(docName)) {\r\n      return (\r\n        <FontAwesomeIcon icon={icon} style={{ color: iconMap[icon].color }} />\r\n      );\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default getDocumentIcon;\r\n\r\n        ","////// Packages //////////////////\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { $fileserv } from 'environ';\r\nimport getDocumentIcon from 'helpers/getDocumentIcon';\r\nimport React, { FC } from 'react'\r\nimport classNames from 'classnames';\r\nimport { UncontrolledTooltip } from 'reactstrap';\r\nimport { MFile } from 'store/types/models/workflow';\r\nimport Flex from './Flex';\r\n\r\n////// Local Components //////////\r\n\r\n////// Global Components /////////\r\n\r\n////// CommonJS Helpers //////////\r\n\r\n////// Custom Hooks //////////////\r\n\r\n////// Thunks ////////////////////\r\n\r\n////// Types /////////////////////\r\n\r\ninterface Props {\r\n    idPrefix: string;\r\n    files?: MFile[];\r\n    handleAdd?: ()=>void\r\n}\r\n\r\nconst FileThumbnailGroup: FC<Props> = ({ idPrefix, files, handleAdd }) => (\r\n    <Flex justify=\"center\" align=\"center\" className=\"mx-auto my-auto fs-2\">\r\n        {files?.map((file, indx, arr) => {\r\n            return (\r\n                <>\r\n                    <span\r\n                        onClick={() => window.open($fileserv + '/' + file.location)}\r\n                        className={classNames(\"cursor-pointer\", {\r\n                            \"ml-n1\": arr.length >= 2,\r\n                            \"ml-2\": arr.length < 2\r\n                        })}\r\n                        id={idPrefix + \"-file-\" + indx}\r\n                    >\r\n                        {getDocumentIcon(file.location)}\r\n                    </span>\r\n                    <UncontrolledTooltip\r\n                        target={idPrefix + \"-file-\" + indx}\r\n                    >\r\n                        {file.title}\r\n                    </UncontrolledTooltip>\r\n                </>\r\n            );\r\n        })}\r\n        {handleAdd && \r\n            <span>\r\n                <FontAwesomeIcon\r\n                    id={idPrefix + \"-file-add\"}\r\n                    icon=\"plus-circle\"\r\n                    color=\"secondary\"\r\n                    className=\"cursor-pointer ml-n1\"\r\n                    onClick={handleAdd}\r\n                />\r\n                <UncontrolledTooltip\r\n                    target={idPrefix + \"-file-add\"}\r\n                >\r\n                    Add Files\r\n                </UncontrolledTooltip>\r\n            </span>\r\n        }\r\n        \r\n    </Flex>\r\n)\r\n\r\nexport default React.memo(FileThumbnailGroup)\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}